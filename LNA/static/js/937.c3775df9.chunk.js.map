{"version":3,"file":"./LNA/static/js/937.c3775df9.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx","common/utils/useForm.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledButton = styled(\"button\")<any>`\n  background: ${(p) => p.color || \"#212738ff\"};\n  color: ${(p) => (p.color ? \"#212738ff\" : \"#fff\")};\n  font-size: 1rem;\n  font-weight: 700;\n  width: 100%;\n  border: 1px solid #edf3f5;\n  border-radius: 4px;\n  padding: 13px 0;\n  cursor: pointer;\n  margin-top: 0.625rem;\n  max-width: 180px;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: #fff;\n    border: 1px solid rgb(187, 0, 0);\n    background-color: rgb(187, 0, 0);\n  }\n`;\n","import { StyledButton } from \"./styles\";\nimport { ButtonProps } from \"../types\";\n\nexport const Button = ({\n  color,\n  fixedWidth,\n  children,\n  onClick,\n  className\n}: ButtonProps) => (\n  <StyledButton color={color} className={className} fixedWidth={fixedWidth} onClick={onClick}>\n    {children}\n  </StyledButton>\n);\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n    \n\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n  border: 1px solid #cacaca;\n  \n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n  border: 1px solid #cacaca;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")<any>`\n  display: block;\n  font-weight: 600;\n  color: #B64F50;\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide, Zoom } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { notification } from \"antd\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\n\nconst Contact = ({ title, content, id, t, carregar }: ContactProps) => {\n  const openNotificationWithIcon = (tipo: 'success' | 'error') => {\n    if (tipo === 'success') {\n      notification[\"success\"]({\n        message: t(\"Success\"),\n        description: t(\"Message sent!\"),\n      });\n    } else if (tipo === 'error') {\n      notification[\"error\"]({\n        message: t(\"Error\"),\n        description: t(\"Message not sent!\"),\n      });\n    }\n  };\n\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    carregar, openNotificationWithIcon\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom direction=\"left\">\n        <Span erros={errors[type]}>{t(ErrorMessage)}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\">\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}> \n          <Slide direction=\"right\">\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button className=\"contactSubmit\" name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);","import { useState, useEffect } from \"react\";\nimport emailjs from '@emailjs/browser';\n\ntype FormValues = {\n  name: string;\n  email: string;\n  message: string;\n};\n\ntype FormErrors = {\n  name?: string;\n  email?: string;\n  message?: string;\n};\n\nconst validate = (values: FormValues): FormErrors => {\n  let errors: FormErrors = {};\n\n  if (!values.name) {\n    errors.name = 'Name is required';\n  }\n\n  if (!values.email) {\n    errors.email = 'Email is required';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email address is invalid';\n  }\n\n  if (!values.message) {\n    errors.message = 'Message is required';\n  }\n\n  return errors;\n};\n\nexport const useForm = (\n  carregar: (loading: boolean) => void,\n  openNotificationWithIcon: (type: 'success' | 'error') => void\n) => {\n  const [values, setValues] = useState<FormValues>({ name: '', email: '', message: '' });\n  const [errors, setErrors] = useState<FormErrors>({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const validationErrors = validate(values);\n    setErrors(validationErrors);\n\n    if (Object.keys(validationErrors).length === 0) {\n      setShouldSubmit(true);\n    }\n  };\n\n  useEffect(() => {\n    if (shouldSubmit) {\n      carregar(true);\n\n      const templateParams = {\n        from_name: values.name,\n        reply_to: values.email,\n        message: values.message,\n      };\n\n      emailjs.send('service_tsqncfl', 'template_n281ssn', templateParams, 'VPWshh0QHyiBo4Lc_')\n        .then(response => {\n          carregar(false);\n          openNotificationWithIcon('success');\n          setEmailSent(true);\n        })\n        .catch(error => {\n          carregar(false);\n          openNotificationWithIcon('error');\n        })\n        .finally(() => {\n          setShouldSubmit(false);\n        });\n    }\n  }, [shouldSubmit]);\n\n  useEffect(() => {\n    if (emailSent) {\n      setValues({ name: '', email: '', message: '' });\n      setEmailSent(false);\n    }\n  }, [emailSent]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    setValues((prevValues) => ({\n      ...prevValues,\n      [name]: value,\n    }));\n    setErrors((prevErrors) => ({ ...prevErrors, [name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};"],"names":["StyledButton","styled","p","color","Button","_ref","fixedWidth","children","onClick","className","_jsx","Content","Container","TextWrapper","withTranslation","title","content","t","_jsxs","StyledInput","StyledContainer","StyledTextArea","Label","name","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","carregar","values","errors","handleChange","handleSubmit","useForm","openNotificationWithIcon","setValues","useState","email","message","setErrors","shouldSubmit","setShouldSubmit","emailSent","setEmailSent","useEffect","templateParams","from_name","reply_to","emailjs","then","response","catch","error","finally","event","value","target","prevValues","prevErrors","preventDefault","validationErrors","test","validate","Object","keys","length","tipo","notification","description","ValidationType","_ref2","type","ErrorMessage","Zoom","direction","erros","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","autoComplete","onSubmit","span","Input","TextArea"],"sourceRoot":""}