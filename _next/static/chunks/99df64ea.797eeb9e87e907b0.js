"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1063],{1530:(t,e,r)=>{let i,a;var n=r(82909).Buffer,s=r(99742);function o(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(e,"__esModule",{value:!0});var l=o(r(89047)),c=o(r(65825)),f=r(97279),d=o(r(51076)),u=o(r(77426)),h=o(r(91097)),w=o(r(37701)),m=o(r(1987)),p=o(r(60055));class g extends Error{constructor(t){super(t),this.caller=""}toJSON(){return{code:this.code,data:this.data,caller:this.caller,message:this.message,stack:this.stack}}fromJSON(t){let e=new g(t.message);return e.code=t.code,e.data=t.data,e.caller=t.caller,e.stack=t.stack,e}get isIsomorphicGitError(){return!0}}class y extends g{constructor(t){super(`Modifying the index is not possible because you have unmerged files: ${t.toString}. Fix them up in the work tree, and then use 'git add/rm as appropriate to mark resolution and make a commit.`),this.code=this.name=y.code,this.data={filepaths:t}}}y.code="UnmergedPathsError";class b extends g{constructor(t){super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${t}`),this.code=this.name=b.code,this.data={message:t}}}b.code="InternalError";class $ extends g{constructor(t){super(`The filepath "${t}" contains unsafe character sequences`),this.code=this.name=$.code,this.data={filepath:t}}}$.code="UnsafeFilepathError";class x{constructor(t){this.buffer=t,this._start=0}eof(){return this._start>=this.buffer.length}tell(){return this._start}seek(t){this._start=t}slice(t){let e=this.buffer.slice(this._start,this._start+t);return this._start+=t,e}toString(t,e){let r=this.buffer.toString(t,this._start,this._start+e);return this._start+=e,r}write(t,e,r){let i=this.buffer.write(t,this._start,e,r);return this._start+=e,i}copy(t,e,r){let i=t.copy(this.buffer,this._start,e,r);return this._start+=i,i}readUInt8(){let t=this.buffer.readUInt8(this._start);return this._start+=1,t}writeUInt8(t){let e=this.buffer.writeUInt8(t,this._start);return this._start+=1,e}readUInt16BE(){let t=this.buffer.readUInt16BE(this._start);return this._start+=2,t}writeUInt16BE(t){let e=this.buffer.writeUInt16BE(t,this._start);return this._start+=2,e}readUInt32BE(){let t=this.buffer.readUInt32BE(this._start);return this._start+=4,t}writeUInt32BE(t){let e=this.buffer.writeUInt32BE(t,this._start);return this._start+=4,e}}function v(t,e){return-(t<e)||+(t>e)}function _(t,e){return v(t.path,e.path)}function j(t){let e=t>0?t>>12:0;4!==e&&8!==e&&10!==e&&14!==e&&(e=8);let r=511&t;return r=73&r?493:420,8!==e&&(r=0),(e<<12)+r}function E(t,e,r,i){if(void 0!==t&&void 0!==e)return[t,e];void 0===r&&(r=i.valueOf());let a=Math.floor(r/1e3),n=(r-1e3*a)*1e6;return[a,n]}function S(t){let[e,r]=E(t.ctimeSeconds,t.ctimeNanoseconds,t.ctimeMs,t.ctime),[i,a]=E(t.mtimeSeconds,t.mtimeNanoseconds,t.mtimeMs,t.mtime);return{ctimeSeconds:e%0x100000000,ctimeNanoseconds:r%0x100000000,mtimeSeconds:i%0x100000000,mtimeNanoseconds:a%0x100000000,dev:t.dev%0x100000000,ino:t.ino%0x100000000,mode:j(t.mode%0x100000000),uid:t.uid%0x100000000,gid:t.gid%0x100000000,size:t.size>-1?t.size%0x100000000:0}}let k=null;async function R(t){var e;return null===k&&(k=await P()),k?I(t):(e=t,new c().update(e).digest("hex"))}async function I(t){var e=await crypto.subtle.digest("SHA-1",t);let r="";for(let t of new Uint8Array(e))t<16&&(r+="0"),r+=t.toString(16);return r}async function P(){try{let t=await I(new Uint8Array([]));if("da39a3ee5e6b4b0d3255bfef95601890afd80709"===t)return!0}catch(t){}return!1}class O{constructor(t,e){this._dirty=!1,this._unmergedPaths=e||new Set,this._entries=t||new Map}_addEntry(t){if(0===t.flags.stage)t.stages=[t],this._entries.set(t.path,t),this._unmergedPaths.delete(t.path);else{let e=this._entries.get(t.path);e||(this._entries.set(t.path,t),e=t),e.stages[t.flags.stage]=t,this._unmergedPaths.add(t.path)}}static async from(t){if(n.isBuffer(t))return O.fromBuffer(t);if(null===t)return new O(null);throw new b("invalid type passed to GitIndex.from")}static async fromBuffer(t){if(0===t.length)throw new b("Index file is empty (.git/index)");let e=new O,r=new x(t),i=r.toString("utf8",4);if("DIRC"!==i)throw new b(`Invalid dircache magic file number: ${i}`);let a=await R(t.slice(0,-20)),n=t.slice(-20).toString("hex");if(n!==a)throw new b(`Invalid checksum in GitIndex buffer: expected ${n} but saw ${a}`);let s=r.readUInt32BE();if(2!==s)throw new b(`Unsupported dircache version: ${s}`);let o=r.readUInt32BE(),l=0;for(;!r.eof()&&l<o;){var c;let i={};i.ctimeSeconds=r.readUInt32BE(),i.ctimeNanoseconds=r.readUInt32BE(),i.mtimeSeconds=r.readUInt32BE(),i.mtimeNanoseconds=r.readUInt32BE(),i.dev=r.readUInt32BE(),i.ino=r.readUInt32BE(),i.mode=r.readUInt32BE(),i.uid=r.readUInt32BE(),i.gid=r.readUInt32BE(),i.size=r.readUInt32BE(),i.oid=r.slice(20).toString("hex"),i.flags={assumeValid:!!(32768&(c=r.readUInt16BE())),extended:!!(16384&c),stage:(12288&c)>>12,nameLength:4095&c};let a=t.indexOf(0,r.tell()+1)-r.tell();if(a<1)throw new b(`Got a path length of: ${a}`);if(i.path=r.toString("utf8",a),i.path.includes("..\\")||i.path.includes("../"))throw new $(i.path);let n=8-(r.tell()-12)%8;for(0===n&&(n=8);n--;){let t=r.readUInt8();if(0!==t)throw new b(`Expected 1-8 null characters but got '${t}' after ${i.path}`);if(r.eof())throw new b("Unexpected end of file")}i.stages=[],e._addEntry(i),l++}return e}get unmergedPaths(){return[...this._unmergedPaths]}get entries(){return[...this._entries.values()].sort(_)}get entriesMap(){return this._entries}get entriesFlat(){return[...this.entries].flatMap(t=>t.stages.length>1?t.stages.filter(t=>t):t)}*[Symbol.iterator](){for(let t of this.entries)yield t}insert({filepath:t,stats:e,oid:r,stage:i=0}){e||(e={ctimeSeconds:0,ctimeNanoseconds:0,mtimeSeconds:0,mtimeNanoseconds:0,dev:0,ino:0,mode:0,uid:0,gid:0,size:0}),e=S(e);let a=n.from(t),s={ctimeSeconds:e.ctimeSeconds,ctimeNanoseconds:e.ctimeNanoseconds,mtimeSeconds:e.mtimeSeconds,mtimeNanoseconds:e.mtimeNanoseconds,dev:e.dev,ino:e.ino,mode:e.mode||33188,uid:e.uid,gid:e.gid,size:e.size,path:t,oid:r,flags:{assumeValid:!1,extended:!1,stage:i,nameLength:a.length<4095?a.length:4095},stages:[]};this._addEntry(s),this._dirty=!0}delete({filepath:t}){if(this._entries.has(t))this._entries.delete(t);else for(let e of this._entries.keys())e.startsWith(t+"/")&&this._entries.delete(e);this._unmergedPaths.has(t)&&this._unmergedPaths.delete(t),this._dirty=!0}clear(){this._entries.clear(),this._dirty=!0}has({filepath:t}){return this._entries.has(t)}render(){return this.entries.map(t=>`${t.mode.toString(8)} ${t.oid}    ${t.path}`).join("\n")}static async _entryToBuffer(t){let e=n.from(t.path),r=8*Math.ceil((62+e.length+1)/8),i=n.alloc(r),a=new x(i),s=S(t);return a.writeUInt32BE(s.ctimeSeconds),a.writeUInt32BE(s.ctimeNanoseconds),a.writeUInt32BE(s.mtimeSeconds),a.writeUInt32BE(s.mtimeNanoseconds),a.writeUInt32BE(s.dev),a.writeUInt32BE(s.ino),a.writeUInt32BE(s.mode),a.writeUInt32BE(s.uid),a.writeUInt32BE(s.gid),a.writeUInt32BE(s.size),a.write(t.oid,20,"hex"),a.writeUInt16BE(function(t){let e=t.flags;return e.extended=!1,e.nameLength=Math.min(n.from(t.path).length,4095),32768*!!e.assumeValid+16384*!!e.extended+((3&e.stage)<<12)+(4095&e.nameLength)}(t)),a.write(t.path,e.length,"utf8"),i}async toObject(){let t=n.alloc(12),e=new x(t);e.write("DIRC",4,"utf8"),e.writeUInt32BE(2),e.writeUInt32BE(this.entriesFlat.length);let r=[];for(let t of this.entries)if(r.push(O._entryToBuffer(t)),t.stages.length>1)for(let e of t.stages)e&&e!==t&&r.push(O._entryToBuffer(e));r=await Promise.all(r);let i=n.concat(r),a=n.concat([t,i]),s=await R(a);return n.concat([a,n.from(s,"hex")])}}function A(t,e,r=!0,i=!0){let a=S(t),n=S(e);return r&&a.mode!==n.mode||a.mtimeSeconds!==n.mtimeSeconds||a.ctimeSeconds!==n.ctimeSeconds||a.uid!==n.uid||a.gid!==n.gid||i&&a.ino!==n.ino||a.size!==n.size}let C=null,U=Symbol("IndexCache");async function D(t,e,r){let[i,a]=await Promise.all([t.lstat(e),t.read(e)]),n=await O.from(a);r.map.set(e,n),r.stats.set(e,i)}async function N(t,e,r){let i=r.stats.get(e);if(void 0===i)return!0;if(null===i)return!1;let a=await t.lstat(e);return null!==a&&A(i,a)}class B{static async acquire({fs:t,gitdir:e,cache:r,allowUnmerged:i=!0},a){let n;r[U]||(r[U]={map:new Map,stats:new Map});let s=`${e}/index`;null===C&&(C=new l({maxPending:1/0}));let o=[];return await C.acquire(s,async()=>{let e=r[U];await N(t,s,e)&&await D(t,s,e);let l=e.map.get(s);if((o=l.unmergedPaths).length&&!i)throw new y(o);if(n=await a(l),l._dirty){let r=await l.toObject();await t.write(s,r),e.stats.set(s,await t.lstat(s)),l._dirty=!1}}),n}}function M(t){let e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return e>-1&&(t=t.slice(e+1)),t}function T(t){let e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return -1===e?".":0===e?"/":t.slice(0,e)}function H(t){let e=new Map,r=function(t){if(!e.has(t)){let i={type:"tree",fullpath:t,basename:M(t),metadata:{},children:[]};e.set(t,i),i.parent=r(T(t)),i.parent&&i.parent!==i&&i.parent.children.push(i)}return e.get(t)};for(let n of(r("."),t)){var i=n.path,a=n;if(!e.has(i)){let t={type:"blob",fullpath:i,basename:M(i),metadata:a,parent:r(T(i)),children:[]};t.parent&&t.parent.children.push(t),e.set(i,t)}e.get(i)}return e}class W{constructor({fs:t,gitdir:e,cache:r}){this.treePromise=B.acquire({fs:t,gitdir:e,cache:r},async function(t){return H(t.entries)});let i=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._oid=!1}async type(){return i.type(this)}async mode(){return i.mode(this)}async stat(){return i.stat(this)}async content(){return i.content(this)}async oid(){return i.oid(this)}}}async readdir(t){let e=t._fullpath,r=(await this.treePromise).get(e);if(!r||"blob"===r.type)return null;if("tree"!==r.type)throw Error(`ENOTDIR: not a directory, scandir '${e}'`);let i=r.children.map(t=>t.fullpath);return i.sort(v),i}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){let e=(await this.treePromise).get(t._fullpath);if(!e)throw Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let r="tree"===e.type?{}:S(e.metadata);t._type="tree"===e.type?"tree":function(t){switch(t){case 16384:return"tree";case 33188:case 33261:case 40960:return"blob";case 57344:return"commit"}throw new b(`Unexpected GitTree entry mode: ${t.toString(8)}`)}(r.mode),t._mode=r.mode,"tree"===e.type?t._stat=void 0:t._stat=r}return t._stat}async content(t){}async oid(t){if(!1===t._oid){let e=(await this.treePromise).get(t._fullpath);t._oid=e.metadata.oid}return t._oid}}let z=Symbol("GitWalkSymbol");function G(){let t=Object.create(null);return Object.defineProperty(t,z,{value:function({fs:t,gitdir:e,cache:r}){return new W({fs:t,gitdir:e,cache:r})}}),Object.freeze(t),t}class F extends g{constructor(t){super(`Could not find ${t}.`),this.code=this.name=F.code,this.data={what:t}}}F.code="NotFoundError";class q extends g{constructor(t,e,r,i){super(`Object ${t} ${i?`at ${i}`:""}was anticipated to be a ${r} but it is a ${e}.`),this.code=this.name=q.code,this.data={oid:t,actual:e,expected:r,filepath:i}}}q.code="ObjectTypeError";class L extends g{constructor(t){super(`Expected a 40-char hex object id but saw "${t}".`),this.code=this.name=L.code,this.data={value:t}}}L.code="InvalidOidError";class V extends g{constructor(t){super(`Could not find a fetch refspec for remote "${t}". Make sure the config file has an entry like the following:
[remote "${t}"]
	fetch = +refs/heads/*:refs/remotes/origin/*
`),this.code=this.name=V.code,this.data={remote:t}}}V.code="NoRefspecError";class K{constructor(t){if(this.refs=new Map,this.parsedConfig=[],t){let e=null;this.parsedConfig=t.trim().split("\n").map(t=>{if(/^\s*#/.test(t))return{line:t,comment:!0};let r=t.indexOf(" ");if(t.startsWith("^")){let r=t.slice(1);return this.refs.set(e+"^{}",r),{line:t,ref:e,peeled:r}}{let i=t.slice(0,r);return e=t.slice(r+1),this.refs.set(e,i),{line:t,ref:e,oid:i}}})}return this}static from(t){return new K(t)}delete(t){this.parsedConfig=this.parsedConfig.filter(e=>e.ref!==t),this.refs.delete(t)}toString(){return this.parsedConfig.map(({line:t})=>t).join("\n")+"\n"}}class Z{constructor({remotePath:t,localPath:e,force:r,matchPrefix:i}){Object.assign(this,{remotePath:t,localPath:e,force:r,matchPrefix:i})}static from(t){let[e,r,i,a,n]=t.match(/^(\+?)(.*?)(\*?):(.*?)(\*?)$/).slice(1),s="*"===i;if(s!==("*"===n))throw new b("Invalid refspec");return new Z({remotePath:r,localPath:a,force:"+"===e,matchPrefix:s})}translate(t){if(this.matchPrefix){if(t.startsWith(this.remotePath))return this.localPath+t.replace(this.remotePath,"")}else if(t===this.remotePath)return this.localPath;return null}reverseTranslate(t){if(this.matchPrefix){if(t.startsWith(this.localPath))return this.remotePath+t.replace(this.localPath,"")}else if(t===this.localPath)return this.remotePath;return null}}class Y{constructor(t=[]){this.rules=t}static from(t){let e=[];for(let r of t)e.push(Z.from(r));return new Y(e)}add(t){let e=Z.from(t);this.rules.push(e)}translate(t){let e=[];for(let r of this.rules)for(let i of t){let t=r.translate(i);t&&e.push([i,t])}return e}translateOne(t){let e=null;for(let r of this.rules){let i=r.translate(t);i&&(e=i)}return e}localNamespaces(){return this.rules.filter(t=>t.matchPrefix).map(t=>t.localPath.replace(/\/$/,""))}}function J(t,e){let r=t.replace(/\^\{\}$/,""),i=e.replace(/\^\{\}$/,""),a=-(r<i)||+(r>i);return 0===a?t.endsWith("^{}")?1:-1:a}let X=t=>{if("boolean"==typeof t)return t;if("true"===(t=t.trim().toLowerCase())||"yes"===t||"on"===t)return!0;if("false"===t||"no"===t||"off"===t)return!1;throw Error(`Expected 'true', 'false', 'yes', 'no', 'on', or 'off', but got ${t}`)},Q={core:{filemode:X,bare:X,logallrefupdates:X,symlinks:X,ignorecase:X,bigFileThreshold:t=>{if("number"==typeof t)return t;let e=parseInt(t=t.toLowerCase());return t.endsWith("k")&&(e*=1024),t.endsWith("m")&&(e*=1048576),t.endsWith("g")&&(e*=0x40000000),e}}},tt=/^\[([A-Za-z0-9-.]+)(?: "(.*)")?\]$/,te=/^[A-Za-z0-9-.]+$/,tr=/^([A-Za-z][A-Za-z-]*)(?: *= *(.*))?$/,ti=/^[A-Za-z][A-Za-z-]*$/,ta=/^(.*?)( *[#;].*)$/,tn=t=>(t.match(/(?:^|[^\\])"/g)||[]).length%2!=0,ts=t=>null!=t?t.toLowerCase():null,to=(t,e,r)=>[ts(t),e,ts(r)].filter(t=>null!=t).join("."),tl=t=>{let e=t.split("."),r=e.shift(),i=e.pop(),a=e.length?e.join("."):void 0;return{section:r,subsection:a,name:i,path:to(r,a,i),sectionPath:to(r,a,null),isSection:!!r}};class tc{constructor(t){let e=null,r=null;this.parsedConfig=t?t.split("\n").map(t=>{let i=null,a=null,n=t.trim(),s=(t=>{let e=tt.exec(t);if(null!=e){let[t,r]=e.slice(1);return[t,r]}return null})(n),o=null!=s;if(o)[e,r]=s;else{let t=(t=>{let e=tr.exec(t);if(null!=e){let[t,r="true"]=e.slice(1);return[t,(t=>{let e=ta.exec(t);if(null==e)return t;let[r,i]=e.slice(1);return tn(r)&&tn(i)?`${r}${i}`:r})(r).split("").reduce((t,e,r,i)=>{let a='"'===e&&"\\"!==i[r-1],n="\\"===e&&'"'===i[r+1];return a||n?t:t+e},"")]}return null})(n);null!=t&&([i,a]=t)}let l=to(e,r,i);return{line:t,isSection:o,section:e,subsection:r,name:i,value:a,path:l}}):[]}static from(t){return new tc(t)}async get(t,e=!1){let r=tl(t).path,i=this.parsedConfig.filter(t=>t.path===r).map(({section:t,name:e,value:r})=>{let i=Q[t]&&Q[t][e];return i?i(r):r});return e?i:i.pop()}async getall(t){return this.get(t,!0)}async getSubsections(t){return this.parsedConfig.filter(e=>e.isSection&&e.section===t).map(t=>t.subsection)}async deleteSection(t,e){this.parsedConfig=this.parsedConfig.filter(r=>r.section!==t||r.subsection!==e)}async append(t,e){return this.set(t,e,!0)}async set(t,e,r=!1){let i,a,{section:n,subsection:s,name:o,path:l,sectionPath:c,isSection:f}=tl(t),d=(i=this.parsedConfig,a=t=>t.path===l,i.reduce((t,e,r)=>a(e)?r:t,-1));if(null==e)-1!==d&&this.parsedConfig.splice(d,1);else if(-1!==d){let t=Object.assign({},this.parsedConfig[d],{name:o,value:e,modified:!0});r?this.parsedConfig.splice(d+1,0,t):this.parsedConfig[d]=t}else{let t=this.parsedConfig.findIndex(t=>t.path===c),r={section:n,subsection:s,name:o,value:e,modified:!0,path:l};te.test(n)&&ti.test(o)&&(t>=0?this.parsedConfig.splice(t+1,0,r):this.parsedConfig.push({isSection:f,section:n,subsection:s,modified:!0,path:c},r))}}toString(){return this.parsedConfig.map(({line:t,section:e,subsection:r,name:i,value:a,modified:n=!1})=>n?null!=i&&null!=a?"string"==typeof a&&/[#;]/.test(a)?`	${i} = "${a}"`:`	${i} = ${a}`:null!=r?`[${e} "${r}"]`:`[${e}]`:t).join("\n")}}class tf{static async get({fs:t,gitdir:e}){let r=await t.read(`${e}/config`,{encoding:"utf8"});return tc.from(r)}static async save({fs:t,gitdir:e,config:r}){await t.write(`${e}/config`,r.toString(),{encoding:"utf8"})}}let td=t=>[`${t}`,`refs/${t}`,`refs/tags/${t}`,`refs/heads/${t}`,`refs/remotes/${t}`,`refs/remotes/${t}/HEAD`],tu=["config","description","index","shallow","commondir"];async function th(t,e){return void 0===i&&(i=new l),i.acquire(t,e)}class tw{static async updateRemoteRefs({fs:t,gitdir:e,remote:r,refs:i,symrefs:a,tags:n,refspecs:s,prune:o=!1,pruneTags:l=!1}){for(let t of i.values())if(!t.match(/[0-9a-f]{40}/))throw new L(t);let c=await tf.get({fs:t,gitdir:e});if(!s){if(0===(s=await c.getall(`remote.${r}.fetch`)).length)throw new V(r);s.unshift(`+HEAD:refs/remotes/${r}/HEAD`)}let d=Y.from(s),u=new Map;if(l){let r=await tw.listRefs({fs:t,gitdir:e,filepath:"refs/tags"});await tw.deleteRefs({fs:t,gitdir:e,refs:r.map(t=>`refs/tags/${t}`)})}if(n){for(let r of i.keys())if(r.startsWith("refs/tags")&&!r.endsWith("^{}")&&!await tw.exists({fs:t,gitdir:e,ref:r})){let t=i.get(r);u.set(r,t)}}for(let[t,e]of d.translate([...i.keys()])){let r=i.get(t);u.set(e,r)}for(let[t,e]of d.translate([...a.keys()])){let r=a.get(t),i=d.translateOne(r);i&&u.set(e,`ref: ${i}`)}let h=[];if(o){for(let r of d.localNamespaces())for(let i of(await tw.listRefs({fs:t,gitdir:e,filepath:r})).map(t=>`${r}/${t}`))u.has(i)||h.push(i);h.length>0&&await tw.deleteRefs({fs:t,gitdir:e,refs:h})}for(let[r,i]of u)await th(r,async()=>t.write(f.join(e,r),`${i.trim()}
`,"utf8"));return{pruned:h}}static async writeRef({fs:t,gitdir:e,ref:r,value:i}){if(!i.match(/[0-9a-f]{40}/))throw new L(i);await th(r,async()=>t.write(f.join(e,r),`${i.trim()}
`,"utf8"))}static async writeSymbolicRef({fs:t,gitdir:e,ref:r,value:i}){await th(r,async()=>t.write(f.join(e,r),`ref: ${i.trim()}
`,"utf8"))}static async deleteRef({fs:t,gitdir:e,ref:r}){return tw.deleteRefs({fs:t,gitdir:e,refs:[r]})}static async deleteRefs({fs:t,gitdir:e,refs:r}){await Promise.all(r.map(r=>t.rm(f.join(e,r))));let i=await th("packed-refs",async()=>t.read(`${e}/packed-refs`,{encoding:"utf8"})),a=K.from(i),n=a.refs.size;for(let t of r)a.refs.has(t)&&a.delete(t);a.refs.size<n&&(i=a.toString(),await th("packed-refs",async()=>t.write(`${e}/packed-refs`,i,{encoding:"utf8"})))}static async resolve({fs:t,gitdir:e,ref:r,depth:i}){if(void 0!==i&&-1==--i)return r;if(r.startsWith("ref: "))return r=r.slice(5),tw.resolve({fs:t,gitdir:e,ref:r,depth:i});if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;let a=await tw.packedRefs({fs:t,gitdir:e});for(let n of td(r).filter(t=>!tu.includes(t))){let r=await th(n,async()=>await t.read(`${e}/${n}`,{encoding:"utf8"})||a.get(n));if(r)return tw.resolve({fs:t,gitdir:e,ref:r.trim(),depth:i})}throw new F(r)}static async exists({fs:t,gitdir:e,ref:r}){try{return await tw.expand({fs:t,gitdir:e,ref:r}),!0}catch(t){return!1}}static async expand({fs:t,gitdir:e,ref:r}){if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;let i=await tw.packedRefs({fs:t,gitdir:e});for(let a of td(r))if(await th(a,async()=>t.exists(`${e}/${a}`))||i.has(a))return a;throw new F(r)}static async expandAgainstMap({ref:t,map:e}){for(let r of td(t))if(await e.has(r))return r;throw new F(t)}static resolveAgainstMap({ref:t,fullref:e=t,depth:r,map:i}){if(void 0!==r&&-1==--r)return{fullref:e,oid:t};if(t.startsWith("ref: "))return t=t.slice(5),tw.resolveAgainstMap({ref:t,fullref:e,depth:r,map:i});if(40===t.length&&/[0-9a-f]{40}/.test(t))return{fullref:e,oid:t};for(let e of td(t)){let t=i.get(e);if(t)return tw.resolveAgainstMap({ref:t.trim(),fullref:e,depth:r,map:i})}throw new F(t)}static async packedRefs({fs:t,gitdir:e}){let r=await th("packed-refs",async()=>t.read(`${e}/packed-refs`,{encoding:"utf8"}));return K.from(r).refs}static async listRefs({fs:t,gitdir:e,filepath:r}){let i=tw.packedRefs({fs:t,gitdir:e}),a=null;try{a=(a=await t.readdirDeep(`${e}/${r}`)).map(t=>t.replace(`${e}/${r}/`,""))}catch(t){a=[]}for(let t of(await i).keys())t.startsWith(r)&&(t=t.replace(r+"/",""),a.includes(t)||a.push(t));return a.sort(J),a}static async listBranches({fs:t,gitdir:e,remote:r}){return r?tw.listRefs({fs:t,gitdir:e,filepath:`refs/remotes/${r}`}):tw.listRefs({fs:t,gitdir:e,filepath:"refs/heads"})}static async listTags({fs:t,gitdir:e}){return(await tw.listRefs({fs:t,gitdir:e,filepath:"refs/tags"})).filter(t=>!t.endsWith("^{}"))}}function tm(t,e){return v(tp(t),tp(e))}function tp(t){return"040000"===t.mode?t.path+"/":t.path}function tg(t){switch(t){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";case"160000":return"commit"}throw new b(`Unexpected GitTree entry mode: ${t}`)}function ty(t){return!t.oid&&t.sha&&(t.oid=t.sha),t.mode=function(t){if("number"==typeof t&&(t=t.toString(8)),t.match(/^0?4.*/))return"040000";if(t.match(/^1006.*/))return"100644";if(t.match(/^1007.*/))return"100755";if(t.match(/^120.*/))return"120000";if(t.match(/^160.*/))return"160000";throw new b(`Could not understand file mode: ${t}`)}(t.mode),t.type||(t.type=tg(t.mode)),t}class tb{constructor(t){if(n.isBuffer(t))this._entries=function(t){let e=[],r=0;for(;r<t.length;){let i=t.indexOf(32,r);if(-1===i)throw new b(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next space character.`);let a=t.indexOf(0,r);if(-1===a)throw new b(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next null character.`);let n=t.slice(r,i).toString("utf8");"40000"===n&&(n="040000");let s=tg(n),o=t.slice(i+1,a).toString("utf8");if(o.includes("\\")||o.includes("/"))throw new $(o);let l=t.slice(a+1,a+21).toString("hex");r=a+21,e.push({mode:n,path:o,oid:l,type:s})}return e}(t);else if(Array.isArray(t))this._entries=t.map(ty);else throw new b("invalid type passed to GitTree constructor");this._entries.sort(_)}static from(t){return new tb(t)}render(){return this._entries.map(t=>`${t.mode} ${t.type} ${t.oid}    ${t.path}`).join("\n")}toObject(){let t=[...this._entries];return t.sort(tm),n.concat(t.map(t=>{let e=n.from(t.mode.replace(/^0/,"")),r=n.from(" "),i=n.from(t.path,"utf8"),a=n.from([0]),s=n.from(t.oid,"hex");return n.concat([e,r,i,a,s])}))}entries(){return this._entries}*[Symbol.iterator](){for(let t of this._entries)yield t}}class t${static wrap({type:t,object:e}){return n.concat([n.from(`${t} ${e.byteLength.toString()}\0`),n.from(e)])}static unwrap(t){let e=t.indexOf(32),r=t.indexOf(0),i=t.slice(0,e).toString("utf8"),a=t.slice(e+1,r).toString("utf8"),s=t.length-(r+1);if(parseInt(a)!==s)throw new b(`Length mismatch: expected ${a} bytes but got ${s} instead.`);return{type:i,object:n.from(t.slice(r+1))}}}async function tx({fs:t,gitdir:e,oid:r}){let i=`objects/${r.slice(0,2)}/${r.slice(2)}`,a=await t.read(`${e}/${i}`);return a?{object:a,format:"deflated",source:i}:null}function tv(t){let e=0,r=0,i=null;do e|=(127&(i=t.readUInt8()))<<r,r+=7;while(128&i);return e}function t_(t,e,r){let i=0,a=0;for(;r--;)1&e&&(i|=t.readUInt8()<<a),e>>=1,a+=8;return i}function tj(t,e){let r=t.readUInt8();if(!(128&r))return t.slice(r);{let i=t_(t,15&r,4),a=t_(t,(112&r)>>4,3);return 0===a&&(a=65536),e.slice(i,i+a)}}function tE(t){let e;return t[Symbol.asyncIterator]?t[Symbol.asyncIterator]():t[Symbol.iterator]?t[Symbol.iterator]():t.next?t:(e=[t],{next:()=>Promise.resolve({done:0===e.length,value:e.pop()}),return:()=>(e=[],{}),[Symbol.asyncIterator](){return this}})}class tS{constructor(t){if(void 0===n)throw Error("Missing Buffer dependency");this.stream=tE(t),this.buffer=null,this.cursor=0,this.undoCursor=0,this.started=!1,this._ended=!1,this._discardedBytes=0}eof(){return this._ended&&this.cursor===this.buffer.length}tell(){return this._discardedBytes+this.cursor}async byte(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(1),this.buffer[this.undoCursor]}async chunk(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(this.buffer.length),this.buffer.slice(this.undoCursor,this.cursor)}async read(t){if(!this.eof())return this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t),this.buffer.slice(this.undoCursor,this.cursor)}async skip(t){this.eof()||(this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t))}async undo(){this.cursor=this.undoCursor}async _next(){this.started=!0;let{done:t,value:e}=await this.stream.next();return t&&(this._ended=!0,!e)?n.alloc(0):(e&&(e=n.from(e)),e)}_trim(){this.buffer=this.buffer.slice(this.undoCursor),this.cursor-=this.undoCursor,this._discardedBytes+=this.undoCursor,this.undoCursor=0}_moveCursor(t){this.undoCursor=this.cursor,this.cursor+=t,this.cursor>this.buffer.length&&(this.cursor=this.buffer.length)}async _accumulate(t){if(this._ended)return;let e=[this.buffer];for(;this.cursor+t>e.reduce((t,e)=>t+e.length,0);){let t=await this._next();if(this._ended)break;e.push(t)}this.buffer=n.concat(e)}async _loadnext(){this._discardedBytes+=this.buffer.length,this.undoCursor=0,this.cursor=0,this.buffer=await this._next()}async _init(){this.buffer=await this._next()}}async function tk(t,e){let r=new tS(t),i=await r.read(4);if("PACK"!==(i=i.toString("utf8")))throw new b(`Invalid PACK header '${i}'`);let a=await r.read(4);if(2!==(a=a.readUInt32BE(0)))throw new b(`Invalid packfile version: ${a}`);let n=await r.read(4);if(!((n=n.readUInt32BE(0))<1))for(;!r.eof()&&n--;){let t=r.tell(),{type:i,length:a,ofs:s,reference:o}=await tR(r),l=new u.Inflate;for(;!l.result;){let c=await r.chunk();if(!c)break;if(l.push(c,!1),l.err)throw new b(`Pako error: ${l.msg}`);if(l.result){if(l.result.length!==a)throw new b("Inflated object size is different from that stated in packfile.");await r.undo(),await r.read(c.length-l.strm.avail_in);let f=r.tell();await e({data:l.result,type:i,num:n,offset:t,end:f,reference:o,ofs:s})}}}}async function tR(t){let e,r,i=await t.byte(),a=i>>4&7,s=15&i;if(128&i){let e=4;do s|=(127&(i=await t.byte()))<<e,e+=7;while(128&i)}if(6===a){let a=0;e=0;let s=[];do e|=(127&(i=await t.byte()))<<a,a+=7,s.push(i);while(128&i);r=n.from(s)}return 7===a&&(r=await t.read(20)),{type:a,length:s,ofs:e,reference:r}}let tI=!1;async function tP(t){return null===tI&&(tI=function(){try{return new DecompressionStream("deflate"),!0}catch(t){}return!1}()),tI?tO(t):u.inflate(t)}async function tO(t){let e=new DecompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}class tA{constructor(t){Object.assign(this,t),this.offsetCache={}}static async fromIdx({idx:t,getExternalRefDelta:e}){let r=new x(t);if("ff744f63"!==r.slice(4).toString("hex"))return;let i=r.readUInt32BE();if(2!==i)throw new b(`Unable to read version ${i} packfile IDX. (Only version 2 supported)`);if(t.byteLength>0x80000000)throw new b("To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.");r.seek(r.tell()+1020);let a=r.readUInt32BE(),n=[];for(let t=0;t<a;t++){let e=r.slice(20).toString("hex");n[t]=e}r.seek(r.tell()+4*a);let s=new Map;for(let t=0;t<a;t++)s.set(n[t],r.readUInt32BE());return new tA({hashes:n,crcs:{},offsets:s,packfileSha:r.slice(20).toString("hex"),getExternalRefDelta:e})}static async fromPack({pack:t,getExternalRefDelta:e,onProgress:r}){let i={1:"commit",2:"tree",3:"blob",4:"tag",6:"ofs-delta",7:"ref-delta"},a={},n=t.slice(-20).toString("hex"),s=[],o={},l=new Map,c=null,f=null;await tk([t],async({data:t,type:e,reference:n,offset:s,num:o})=>{null===c&&(c=o);let l=Math.floor((c-o)*100/c);l!==f&&r&&await r({phase:"Receiving objects",loaded:c-o,total:c}),f=l,["commit","tree","blob","tag"].includes(e=i[e])||"ofs-delta"===e?a[s]={type:e,offset:s}:"ref-delta"===e&&(a[s]={type:e,offset:s})});let u=Object.keys(a).map(Number);for(let[e,r]of u.entries()){let i=e+1===u.length?t.byteLength-20:u[e+1],n=a[r],s=d.buf(t.slice(r,i))>>>0;n.end=i,n.crc=s}let h=new tA({pack:Promise.resolve(t),packfileSha:n,crcs:o,hashes:s,offsets:l,getExternalRefDelta:e});f=null;let w=0,m=[0,0,0,0,0,0,0,0,0,0,0,0];for(let t in a){t=Number(t);let e=Math.floor(100*w/c);e!==f&&r&&await r({phase:"Resolving deltas",loaded:w,total:c}),w++,f=e;let i=a[t];if(!i.oid)try{h.readDepth=0,h.externalReadDepth=0;let{type:e,object:r}=await h.readSlice({start:t});m[h.readDepth]+=1;let a=await R(t$.wrap({type:e,object:r}));i.oid=a,s.push(a),l.set(a,t),o[a]=i.crc}catch(t){continue}}return s.sort(),h}async toBuffer(){let t=[],e=(e,r)=>{t.push(n.from(e,r))};e("ff744f63","hex"),e("00000002","hex");let r=new x(n.alloc(1024));for(let t=0;t<256;t++){let e=0;for(let r of this.hashes)parseInt(r.slice(0,2),16)<=t&&e++;r.writeUInt32BE(e)}for(let i of(t.push(r.buffer),this.hashes))e(i,"hex");let i=new x(n.alloc(4*this.hashes.length));for(let t of this.hashes)i.writeUInt32BE(this.crcs[t]);t.push(i.buffer);let a=new x(n.alloc(4*this.hashes.length));for(let t of this.hashes)a.writeUInt32BE(this.offsets.get(t));t.push(a.buffer),e(this.packfileSha,"hex");let s=n.concat(t),o=await R(s),l=n.alloc(20);return l.write(o,"hex"),n.concat([s,l])}async load({pack:t}){this.pack=t}async unload(){this.pack=null}async read({oid:t}){if(!this.offsets.get(t))if(this.getExternalRefDelta)return this.externalReadDepth++,this.getExternalRefDelta(t);else throw new b(`Could not read object ${t} from packfile`);let e=this.offsets.get(t);return this.readSlice({start:e})}async readSlice({start:t}){if(this.offsetCache[t])return Object.assign({},this.offsetCache[t]);if(this.readDepth++,!this.pack)throw new b("Tried to read from a GitPackIndex with no packfile loaded into memory");let e=(await this.pack).slice(t),r=new x(e),i=r.readUInt8(),a=112&i,s={16:"commit",32:"tree",48:"blob",64:"tag",96:"ofs_delta",112:"ref_delta"}[a];if(void 0===s)throw new b("Unrecognized type: 0b"+a.toString(2));let o=15&i,l=o;128&i&&(l=function(t,e){let r=e,i=4,a=null;do r|=(127&(a=t.readUInt8()))<<i,i+=7;while(128&a);return r}(r,o));let c=null,f=null;if("ofs_delta"===s){let e=t-function(t){let e=[],r=0,i=0;do{let a=127&(r=t.readUInt8());e.push(a),i=128&r}while(i);return e.reduce((t,e)=>t+1<<7|e,-1)}(r);({object:c,type:s}=await this.readSlice({start:e}))}if("ref_delta"===s){let t=r.slice(20).toString("hex");({object:c,type:s}=await this.read({oid:t}))}let d=e.slice(r.tell());if((f=n.from(await tP(d))).byteLength!==l)throw new b(`Packfile told us object would have length ${l} but it had length ${f.byteLength}`);return c&&(f=n.from(function(t,e){let r,i=new x(t),a=tv(i);if(a!==e.byteLength)throw new b(`applyDelta expected source buffer to be ${a} bytes but the provided buffer was ${e.length} bytes`);let s=tv(i),o=tj(i,e);if(o.byteLength===s)r=o;else{let t=new x(r=n.alloc(s));for(t.copy(o);!i.eof();)t.copy(tj(i,e));let a=t.tell();if(s!==a)throw new b(`applyDelta expected target buffer to be ${s} bytes but the resulting buffer was ${a} bytes`)}return r}(f,c))),this.readDepth>3&&(this.offsetCache[t]={type:s,object:f}),{type:s,format:"content",object:f}}}let tC=Symbol("PackfileCache");async function tU({fs:t,filename:e,getExternalRefDelta:r,emitter:i,emitterPrefix:a}){let n=await t.read(e);return tA.fromIdx({idx:n,getExternalRefDelta:r})}function tD({fs:t,cache:e,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:n}){e[tC]||(e[tC]=new Map);let s=e[tC].get(r);return s||(s=tU({fs:t,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:n}),e[tC].set(r,s)),s}async function tN({fs:t,cache:e,gitdir:r,oid:i,format:a="content",getExternalRefDelta:n}){let s=await t.readdir(f.join(r,"objects/pack"));for(let a of s=s.filter(t=>t.endsWith(".idx"))){let s=`${r}/objects/pack/${a}`,o=await tD({fs:t,cache:e,filename:s,getExternalRefDelta:n});if(o.error)throw new b(o.error);if(o.offsets.has(i)){if(!o.pack){let e=s.replace(/idx$/,"pack");o.pack=t.read(e)}let e=await o.read({oid:i,getExternalRefDelta:n});return e.format="content",e.source=`objects/pack/${a.replace(/idx$/,"pack")}`,e}}return null}async function tB({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){let s;if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i&&(s={format:"wrapped",object:n.from(`tree 0\0`)}),s||(s=await tx({fs:t,gitdir:r,oid:i})),!s){if(!(s=await tN({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tB({fs:t,cache:e,gitdir:r,oid:i})})))throw new F(i);return s}if("deflated"===a||("deflated"===s.format&&(s.object=n.from(await tP(s.object)),s.format="wrapped"),"wrapped"===a))return s;let o=await R(s.object);if(o!==i)throw new b(`SHA check failed! Expected ${i}, computed ${o}`);let{object:l,type:c}=t$.unwrap(s.object);if(s.type=c,s.object=l,s.format="content","content"===a)return s;throw new b(`invalid requested format "${a}"`)}class tM extends g{constructor(t,e,r=!0){super(`Failed to create ${t} at ${e} because it already exists.${r?` (Hint: use 'force: true' parameter to overwrite existing ${t}.)`:""}`),this.code=this.name=tM.code,this.data={noun:t,where:e,canForce:r}}}tM.code="AlreadyExistsError";class tT extends g{constructor(t,e,r){super(`Found multiple ${t} matching "${e}" (${r.join(", ")}). Use a longer abbreviation length to disambiguate them.`),this.code=this.name=tT.code,this.data={nouns:t,short:e,matches:r}}}tT.code="AmbiguousError";class tH extends g{constructor(t){super(`Your local changes to the following files would be overwritten by checkout: ${t.join(", ")}`),this.code=this.name=tH.code,this.data={filepaths:t}}}tH.code="CheckoutConflictError";class tW extends g{constructor(t,e){super(`Failed to checkout "${t}" because commit ${e} is not available locally. Do a git fetch to make the branch available locally.`),this.code=this.name=tW.code,this.data={ref:t,oid:e}}}tW.code="CommitNotFetchedError";class tz extends g{constructor(){super("Empty response from git server."),this.code=this.name=tz.code,this.data={}}}tz.code="EmptyServerResponseError";class tG extends g{constructor(){super("A simple fast-forward merge was not possible."),this.code=this.name=tG.code,this.data={}}}tG.code="FastForwardError";class tF extends g{constructor(t,e){super(`One or more branches were not updated: ${t}`),this.code=this.name=tF.code,this.data={prettyDetails:t,result:e}}}tF.code="GitPushError";class tq extends g{constructor(t,e,r){super(`HTTP Error: ${t} ${e}`),this.code=this.name=tq.code,this.data={statusCode:t,statusMessage:e,response:r}}}tq.code="HttpError";class tL extends g{constructor(t){let e="invalid filepath";"leading-slash"===t||"trailing-slash"===t?e='"filepath" parameter should not include leading or trailing directory separators because these can cause problems on some platforms.':"directory"===t&&(e='"filepath" should not be a directory.'),super(e),this.code=this.name=tL.code,this.data={reason:t}}}tL.code="InvalidFilepathError";class tV extends g{constructor(t,e){super(`"${t}" would be an invalid git reference. (Hint: a valid alternative would be "${e}".)`),this.code=this.name=tV.code,this.data={ref:t,suggestion:e}}}tV.code="InvalidRefNameError";class tK extends g{constructor(t){super(`Maximum search depth of ${t} exceeded.`),this.code=this.name=tK.code,this.data={depth:t}}}tK.code="MaxDepthError";class tZ extends g{constructor(){super("Merges with conflicts are not supported yet."),this.code=this.name=tZ.code,this.data={}}}tZ.code="MergeNotSupportedError";class tY extends g{constructor(t,e,r,i){super(`Automatic merge failed with one or more merge conflicts in the following files: ${t.toString()}. Fix conflicts then commit the result.`),this.code=this.name=tY.code,this.data={filepaths:t,bothModified:e,deleteByUs:r,deleteByTheirs:i}}}tY.code="MergeConflictError";class tJ extends g{constructor(t){super(`No name was provided for ${t} in the argument or in the .git/config file.`),this.code=this.name=tJ.code,this.data={role:t}}}tJ.code="MissingNameError";class tX extends g{constructor(t){super(`The function requires a "${t}" parameter but none was provided.`),this.code=this.name=tX.code,this.data={parameter:t}}}tX.code="MissingParameterError";class tQ extends g{constructor(t){super('There are multiple errors that were thrown by the method. Please refer to the "errors" property to see more'),this.code=this.name=tQ.code,this.data={errors:t},this.errors=t}}tQ.code="MultipleGitError";class t0 extends g{constructor(t,e){super(`Expected "${t}" but received "${e}".`),this.code=this.name=t0.code,this.data={expected:t,actual:e}}}t0.code="ParseError";class t1 extends g{constructor(t){let e="";"not-fast-forward"===t?e=" because it was not a simple fast-forward":"tag-exists"===t&&(e=" because tag already exists"),super(`Push rejected${e}. Use "force: true" to override.`),this.code=this.name=t1.code,this.data={reason:t}}}t1.code="PushRejectedError";class t2 extends g{constructor(t,e){super(`Remote does not support the "${t}" so the "${e}" parameter cannot be used.`),this.code=this.name=t2.code,this.data={capability:t,parameter:e}}}t2.code="RemoteCapabilityError";class t8 extends g{constructor(t,e){super(`Remote did not reply using the "smart" HTTP protocol. Expected "001e# service=git-upload-pack" but received: ${t}`),this.code=this.name=t8.code,this.data={preview:t,response:e}}}t8.code="SmartHttpError";class t4 extends g{constructor(t,e,r){super(`Git remote "${t}" uses an unrecognized transport protocol: "${e}"`),this.code=this.name=t4.code,this.data={url:t,transport:e,suggestion:r}}}t4.code="UnknownTransportError";class t3 extends g{constructor(t){super(`Cannot parse remote URL: "${t}"`),this.code=this.name=t3.code,this.data={url:t}}}t3.code="UrlParseError";class t6 extends g{constructor(){super("The operation was canceled."),this.code=this.name=t6.code,this.data={}}}t6.code="UserCanceledError";class t9 extends g{constructor(t){super(`Could not merge index: Entry for '${t}' is not up to date. Either reset the index entry to HEAD, or stage your unstaged changes.`),this.code=this.name=t9.code,this.data={filepath:t}}}t9.code="IndexResetError";class t5 extends g{constructor(t){super(`"${t}" does not point to any commit. You're maybe working on a repository with no commits yet. `),this.code=this.name=t5.code,this.data={ref:t}}}t5.code="NoCommitError";var t7=Object.freeze({__proto__:null,AlreadyExistsError:tM,AmbiguousError:tT,CheckoutConflictError:tH,CommitNotFetchedError:tW,EmptyServerResponseError:tz,FastForwardError:tG,GitPushError:tF,HttpError:tq,InternalError:b,InvalidFilepathError:tL,InvalidOidError:L,InvalidRefNameError:tV,MaxDepthError:tK,MergeNotSupportedError:tZ,MergeConflictError:tY,MissingNameError:tJ,MissingParameterError:tX,MultipleGitError:tQ,NoRefspecError:V,NotFoundError:F,ObjectTypeError:q,ParseError:t0,PushRejectedError:t1,RemoteCapabilityError:t2,SmartHttpError:t8,UnknownTransportError:t4,UnsafeFilepathError:$,UrlParseError:t3,UserCanceledError:t6,UnmergedPathsError:y,IndexResetError:t9,NoCommitError:t5});function et({name:t,email:e,timestamp:r,timezoneOffset:i}){return i=function(t){var e,r;let i=Math.sign(r=0===(e=t)?e:-e)||(Object.is(r,-0)?-1:1),a=Math.floor((t=Math.abs(t))/60);t-=60*a;let n=String(a),s=String(t);return n.length<2&&(n="0"+n),s.length<2&&(s="0"+s),(-1===i?"-":"+")+n+s}(i),`${t} <${e}> ${r} ${i}`}function ee(t){return t=(t=(t=t.replace(/\r/g,"")).replace(/^\n+/,"")).replace(/\n+$/,"")+"\n"}function er(t){let[,e,r,i,a]=t.match(/^(.*) <(.*)> (.*) (.*)$/);return{name:e,email:r,timestamp:Number(i),timezoneOffset:function(t){var e;let[,r,i,a]=t.match(/(\+|-)(\d\d)(\d\d)/);return 0==(e=a=("+"===r?1:-1)*(60*Number(i)+Number(a)))?e:-e}(a)}}class ei{constructor(t){if("string"==typeof t)this._tag=t;else if(n.isBuffer(t))this._tag=t.toString("utf8");else if("object"==typeof t)this._tag=ei.render(t);else throw new b("invalid type passed to GitAnnotatedTag constructor")}static from(t){return new ei(t)}static render(t){return`object ${t.object}
type ${t.type}
tag ${t.tag}
tagger ${et(t.tagger)}

${t.message}
${t.gpgsig?t.gpgsig:""}`}justHeaders(){return this._tag.slice(0,this._tag.indexOf("\n\n"))}message(){let t=this.withoutSignature();return t.slice(t.indexOf("\n\n")+2)}parse(){return Object.assign(this.headers(),{message:this.message(),gpgsig:this.gpgsig()})}render(){return this._tag}headers(){let t=this.justHeaders().split("\n"),e=[];for(let r of t)" "===r[0]?e[e.length-1]+="\n"+r.slice(1):e.push(r);let r={};for(let t of e){let e=t.slice(0,t.indexOf(" ")),i=t.slice(t.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(i):r[e]=i}return r.tagger&&(r.tagger=er(r.tagger)),r.committer&&(r.committer=er(r.committer)),r}withoutSignature(){let t=ee(this._tag);return -1===t.indexOf("\n-----BEGIN PGP SIGNATURE-----")?t:t.slice(0,t.lastIndexOf("\n-----BEGIN PGP SIGNATURE-----"))}gpgsig(){if(-1!==this._tag.indexOf("\n-----BEGIN PGP SIGNATURE-----"))return ee(this._tag.slice(this._tag.indexOf("-----BEGIN PGP SIGNATURE-----"),this._tag.indexOf("-----END PGP SIGNATURE-----")+27))}payload(){return this.withoutSignature()+"\n"}toObject(){return n.from(this._tag,"utf8")}static async sign(t,e,r){let i=t.payload(),{signature:a}=await e({payload:i,secretKey:r}),n=i+(a=ee(a));return ei.from(n)}}function ea(t){return t.trim().split("\n").map(t=>" "+t).join("\n")+"\n"}class en{constructor(t){if("string"==typeof t)this._commit=t;else if(n.isBuffer(t))this._commit=t.toString("utf8");else if("object"==typeof t)this._commit=en.render(t);else throw new b("invalid type passed to GitCommit constructor")}static fromPayloadSignature({payload:t,signature:e}){let r=en.justHeaders(t),i=en.justMessage(t);return new en(ee(r+"\ngpgsig"+ea(e)+"\n"+i))}static from(t){return new en(t)}toObject(){return n.from(this._commit,"utf8")}headers(){return this.parseHeaders()}message(){return en.justMessage(this._commit)}parse(){return Object.assign({message:this.message()},this.headers())}static justMessage(t){return ee(t.slice(t.indexOf("\n\n")+2))}static justHeaders(t){return t.slice(0,t.indexOf("\n\n"))}parseHeaders(){let t=en.justHeaders(this._commit).split("\n"),e=[];for(let r of t)" "===r[0]?e[e.length-1]+="\n"+r.slice(1):e.push(r);let r={parent:[]};for(let t of e){let e=t.slice(0,t.indexOf(" ")),i=t.slice(t.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(i):r[e]=i}return r.author&&(r.author=er(r.author)),r.committer&&(r.committer=er(r.committer)),r}static renderHeaders(t){let e="";if(t.tree?e+=`tree ${t.tree}
`:e+=`tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
`,t.parent){if(void 0===t.parent.length)throw new b("commit 'parent' property should be an array");for(let r of t.parent)e+=`parent ${r}
`}let r=t.author;e+=`author ${et(r)}
`;let i=t.committer||t.author;return e+=`committer ${et(i)}
`,t.gpgsig&&(e+="gpgsig"+ea(t.gpgsig)),e}static render(t){return en.renderHeaders(t)+"\n"+ee(t.message)}render(){return this._commit}withoutSignature(){let t=ee(this._commit);return -1===t.indexOf("\ngpgsig")?t:ee(t.slice(0,t.indexOf("\ngpgsig"))+"\n"+t.slice(t.indexOf("-----END PGP SIGNATURE-----\n")+28))}isolateSignature(){return this._commit.slice(this._commit.indexOf("-----BEGIN PGP SIGNATURE-----"),this._commit.indexOf("-----END PGP SIGNATURE-----")+27).split("\n").map(t=>t.replace(/^ /,"")).join("\n")}static async sign(t,e,r){let i=t.withoutSignature(),a=en.justMessage(t._commit),{signature:n}=await e({payload:i,secretKey:r});n=ee(n);let s=en.justHeaders(t._commit)+"\ngpgsig"+ea(n)+"\n"+a;return en.from(s)}}async function es({fs:t,cache:e,gitdir:r,oid:i}){if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i)return{tree:tb.from([]),oid:i};let{type:a,object:n}=await tB({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return es({fs:t,cache:e,gitdir:r,oid:i=ei.from(n).parse().object});if("commit"===a)return es({fs:t,cache:e,gitdir:r,oid:i=en.from(n).parse().tree});if("tree"!==a)throw new q(i,a,"tree");return{tree:tb.from(n),oid:i}}class eo{constructor({fs:t,gitdir:e,ref:r,cache:i}){this.fs=t,this.cache=i,this.gitdir=e,this.mapPromise=(async()=>{let i,a=new Map;try{i=await tw.resolve({fs:t,gitdir:e,ref:r})}catch(t){t instanceof F&&(i="4b825dc642cb6eb9a060e54bf8d69288fbee4904")}let n=await es({fs:t,cache:this.cache,gitdir:e,oid:i});return n.type="tree",n.mode="40000",a.set(".",n),a})();let a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){let e=t._fullpath,{fs:r,cache:i,gitdir:a}=this,n=await this.mapPromise,s=n.get(e);if(!s)throw Error(`No obj for ${e}`);let o=s.oid;if(!o)throw Error(`No oid for obj ${JSON.stringify(s)}`);if("tree"!==s.type)return null;let{type:l,object:c}=await tB({fs:r,cache:i,gitdir:a,oid:o});if(l!==s.type)throw new q(o,l,s.type);let d=tb.from(c);for(let t of d)n.set(f.join(e,t.path),t);return d.entries().map(t=>f.join(e,t.path))}async type(t){if(!1===t._type){let{type:e}=(await this.mapPromise).get(t._fullpath);t._type=e}return t._type}async mode(t){if(!1===t._mode){let{mode:e}=(await this.mapPromise).get(t._fullpath);t._mode=j(parseInt(e,8))}return t._mode}async stat(t){}async content(t){if(!1===t._content){let e=await this.mapPromise,{fs:r,cache:i,gitdir:a}=this,n=e.get(t._fullpath).oid,{type:s,object:o}=await tB({fs:r,cache:i,gitdir:a,oid:n});"blob"!==s?t._content=void 0:t._content=new Uint8Array(o)}return t._content}async oid(t){if(!1===t._oid){let e=(await this.mapPromise).get(t._fullpath);t._oid=e.oid}return t._oid}}function el({ref:t="HEAD"}={}){let e=Object.create(null);return Object.defineProperty(e,z,{value:function({fs:e,gitdir:r,cache:i}){return new eo({fs:e,gitdir:r,ref:t,cache:i})}}),Object.freeze(e),e}class ec{constructor({fs:t,dir:e,gitdir:r,cache:i}){this.fs=t,this.cache=i,this.dir=e,this.gitdir=r,this.config=null;let a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){let e=t._fullpath,{fs:r,dir:i}=this,a=await r.readdir(f.join(i,e));return null===a?null:a.map(t=>f.join(e,t))}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){let{fs:e,dir:r}=this,i=await e.lstat(`${r}/${t._fullpath}`);if(!i)throw Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let a=i.isDirectory()?"tree":"blob";"blob"!==a||i.isFile()||i.isSymbolicLink()||(a="special"),t._type=a,t._mode=(i=S(i)).mode,-1===i.size&&t._actualSize&&(i.size=t._actualSize),t._stat=i}return t._stat}async content(t){if(!1===t._content){let{fs:e,dir:r,gitdir:i}=this;if(await t.type()==="tree")t._content=void 0;else{let a=await this._getGitConfig(e,i),n=await a.get("core.autocrlf"),s=await e.read(`${r}/${t._fullpath}`,{autocrlf:n});t._actualSize=s.length,t._stat&&-1===t._stat.size&&(t._stat.size=t._actualSize),t._content=new Uint8Array(s)}}return t._content}async oid(t){if(!1===t._oid){let e,r=this,{fs:i,gitdir:a,cache:n}=this;await B.acquire({fs:i,gitdir:a,cache:n},async function(n){let o=n.entriesMap.get(t._fullpath),l=await t.stat(),c=await r._getGitConfig(i,a),f=await c.get("core.filemode"),d=void 0===s||"win32"!==s.platform;if(!o||A(l,o,f,d)){let r=await t.content();void 0===r?e=void 0:(e=await R(t$.wrap({type:"blob",object:r})),o&&e===o.oid&&(!f||l.mode===o.mode)&&A(l,o,f,d)&&n.insert({filepath:t._fullpath,stats:l,oid:e}))}else e=o.oid}),t._oid=e}return t._oid}async _getGitConfig(t,e){return this.config||(this.config=await tf.get({fs:t,gitdir:e})),this.config}}function ef(){let t=Object.create(null);return Object.defineProperty(t,z,{value:function({fs:t,dir:e,gitdir:r,cache:i}){return new ec({fs:t,dir:e,gitdir:r,cache:i})}}),Object.freeze(t),t}let ed=void 0===Array.prototype.flat?t=>t.reduce((t,e)=>t.concat(e),[]):t=>t.flat();class eu{constructor(){this.value=null}consider(t){null!=t&&(null===this.value?this.value=t:t<this.value&&(this.value=t))}reset(){this.value=null}}async function eh({fs:t,cache:e,dir:r,gitdir:i,trees:a,map:n=async(t,e)=>e,reduce:s=async(t,e)=>{let r=ed(e);return void 0!==t&&r.unshift(t),r},iterate:o=(t,e)=>Promise.all([...e].map(t))}){let l=a.map(a=>a[z]({fs:t,dir:r,gitdir:i,cache:e})),c=Array(l.length).fill("."),f=Array.from({length:l.length-0},(t,e)=>0+e),d=async t=>{f.map(e=>{let r=t[e];t[e]=r&&new l[e].ConstructEntry(r)});let e=(await Promise.all(f.map(e=>{let r=t[e];return r?l[e].readdir(r):[]}))).map(t=>(null===t?[]:t)[Symbol.iterator]());return{entries:t,children:function*(t){let e,r=new eu,i=[],a=t.length;for(let e=0;e<a;e++)i[e]=t[e].next().value,void 0!==i[e]&&r.consider(i[e]);if(null!==r.value)for(;;){let n=[];e=r.value,r.reset();for(let s=0;s<a;s++)void 0!==i[s]&&i[s]===e?(n[s]=i[s],i[s]=t[s].next().value):n[s]=null,void 0!==i[s]&&r.consider(i[s]);if(yield n,null===r.value)return}}(e)}},u=async t=>{let{entries:e,children:r}=await d(t),i=e.find(t=>t&&t._fullpath)._fullpath,a=await n(i,e);if(null!==a){let t=await o(u,r);return s(a,t=t.filter(t=>void 0!==t))}};return u(c)}async function ew(t,e){let r=await t.readdir(e);null==r?await t.rm(e):r.length?await Promise.all(r.map(r=>{let i=f.join(e,r);return t.lstat(i).then(e=>{if(e)return e.isDirectory()?ew(t,i):t.rm(i)})})).then(()=>t.rmdir(e)):await t.rmdir(e)}function em(t){return"function"==typeof t}function ep(t){var e,r;return(r=e=(t=>{try{return t.readFile().catch(t=>t)}catch(t){return t}})(t))&&"object"==typeof r&&em(e.then)&&em(e.catch)}let eg=["readFile","writeFile","mkdir","rmdir","unlink","stat","lstat","readdir","readlink","symlink"];function ey(t,e){if(ep(e))for(let r of eg)t[`_${r}`]=e[r].bind(e);else for(let r of eg)t[`_${r}`]=h(e[r].bind(e));ep(e)?e.rm?t._rm=e.rm.bind(e):e.rmdir.length>1?t._rm=e.rmdir.bind(e):t._rm=ew.bind(null,t):e.rm?t._rm=h(e.rm.bind(e)):e.rmdir.length>2?t._rm=h(e.rmdir.bind(e)):t._rm=ew.bind(null,t)}class eb{constructor(t){if(void 0!==t._original_unwrapped_fs)return t;let e=Object.getOwnPropertyDescriptor(t,"promises");e&&e.enumerable?ey(this,t.promises):ey(this,t),this._original_unwrapped_fs=t}async exists(t,e={}){try{return await this._stat(t),!0}catch(t){if("ENOENT"===t.code||"ENOTDIR"===t.code||(t.code||"").includes("ENS"))return!1;throw console.log('Unhandled error in "FileSystem.exists()" function',t),t}}async read(t,e={}){try{let r=await this._readFile(t,e);if("true"===e.autocrlf)try{r=(r=new TextDecoder("utf8",{fatal:!0}).decode(r)).replace(/\r\n/g,"\n"),r=new TextEncoder().encode(r)}catch(t){}return"string"!=typeof r&&(r=n.from(r)),r}catch(t){return null}}async write(t,e,r={}){try{await this._writeFile(t,e,r);return}catch(i){await this.mkdir(T(t)),await this._writeFile(t,e,r)}}async mkdir(t,e=!1){try{await this._mkdir(t);return}catch(r){if(null===r||"EEXIST"===r.code)return;if(e)throw r;if("ENOENT"===r.code){let e=T(t);if("."===e||"/"===e||e===t)throw r;await this.mkdir(e),await this.mkdir(t,!0)}}}async rm(t){try{await this._unlink(t)}catch(t){if("ENOENT"!==t.code)throw t}}async rmdir(t,e){try{e&&e.recursive?await this._rm(t,e):await this._rmdir(t)}catch(t){if("ENOENT"!==t.code)throw t}}async readdir(t){try{let e=await this._readdir(t);return e.sort(v),e}catch(t){if("ENOTDIR"===t.code)return null;return[]}}async readdirDeep(t){let e=await this._readdir(t);return(await Promise.all(e.map(async e=>{let r=t+"/"+e;return(await this._stat(r)).isDirectory()?this.readdirDeep(r):r}))).reduce((t,e)=>t.concat(e),[])}async lstat(t){try{return await this._lstat(t)}catch(t){if("ENOENT"===t.code||(t.code||"").includes("ENS"))return null;throw t}}async readlink(t,e={encoding:"buffer"}){try{let r=await this._readlink(t,e);return n.isBuffer(r)?r:n.from(r)}catch(t){if("ENOENT"===t.code||(t.code||"").includes("ENS"))return null;throw t}}async writelink(t,e){return this._symlink(e.toString("utf8"),t)}}function e$(t,e){if(void 0===e)throw new tX(t)}async function ex(t,e){return(!!t||!!e)&&(!!t&&!e||!t&&!!e||(await t.type()!=="tree"||await e.type()!=="tree")&&(await t.type()!==await e.type()||await t.mode()!==await e.mode()||await t.oid()!==await e.oid()))}async function ev({fs:t,dir:e,gitdir:r=f.join(e,".git"),commit:i="HEAD",cache:a={}}){try{e$("fs",t),e$("dir",e),e$("gitdir",r);let n=new eb(t),s=[el({ref:i}),ef(),G()],o=[];await B.acquire({fs:n,gitdir:r,cache:a},async function(t){o=t.unmergedPaths});let l=await eh({fs:n,cache:a,dir:e,gitdir:r,trees:s,map:async function(t,[e,r,i]){let a=!await ex(r,i),n=o.includes(t),s=!await ex(i,e);if(a||n)return e?{path:t,mode:await e.mode(),oid:await e.oid(),type:await e.type(),content:await e.content()}:void 0;if(s)return!1;throw new t9(t)}});await B.acquire({fs:n,gitdir:r,cache:a},async function(t){for(let r of l)if(!1!==r){if(!r){await n.rmdir(`${e}/${r.path}`,{recursive:!0}),t.delete({filepath:r.path});continue}if("blob"===r.type){let i=new TextDecoder().decode(r.content);await n.write(`${e}/${r.path}`,i,{mode:r.mode}),t.insert({filepath:r.path,oid:r.oid,stage:0})}}})}catch(t){throw t.caller="git.abortMerge",t}}class e_{static async isIgnored({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i}){if(".git"===M(i))return!0;if("."===i)return!1;let a="",n=f.join(r,"info","exclude");await t.exists(n)&&(a=await t.read(n,"utf8"));let s=[{gitignore:f.join(e,".gitignore"),filepath:i}],o=i.split("/").filter(Boolean);for(let t=1;t<o.length;t++){let r=o.slice(0,t).join("/"),i=o.slice(t).join("/");s.push({gitignore:f.join(e,r,".gitignore"),filepath:i})}let l=!1;for(let e of s){let r;try{r=await t.read(e.gitignore,"utf8")}catch(t){if("NOENT"===t.code)continue}let i=w().add(a);i.add(r);let n=T(e.filepath);if("."!==n&&i.ignores(n))return!0;l=l?!i.test(e.filepath).unignored:i.test(e.filepath).ignored}return l}}async function ej({fs:t,gitdir:e,object:r,format:i,oid:a}){if("deflated"!==i)throw new b("GitObjectStoreLoose expects objects to write to be in deflated format");let n=`objects/${a.slice(0,2)}/${a.slice(2)}`,s=`${e}/${n}`;await t.exists(s)||await t.write(s,r)}let eE=null;async function eS(t){return null===eE&&(eE=function(){try{return new CompressionStream("deflate").writable.close(),new Blob([]).stream().cancel(),!0}catch(t){return!1}}()),eE?ek(t):u.deflate(t)}async function ek(t){let e=new CompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}async function eR({fs:t,gitdir:e,type:r,object:i,format:a="content",oid:s,dryRun:o=!1}){return"deflated"!==a&&("wrapped"!==a&&(i=t$.wrap({type:r,object:i})),s=await R(i),i=n.from(await eS(i))),o||await ej({fs:t,gitdir:e,object:i,format:"deflated",oid:s}),s}function eI(t){let e;for(;~(e=t.indexOf(92));)t[e]=47;return t}async function eP({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i,cache:a={},force:n=!1,parallel:s=!0}){try{e$("fs",t),e$("dir",e),e$("gitdir",r),e$("filepath",i);let o=new eb(t);await B.acquire({fs:o,gitdir:r,cache:a},async t=>{let a=await tf.get({fs:o,gitdir:r}),l=await a.get("core.autocrlf");return eO({dir:e,gitdir:r,fs:o,filepath:i,index:t,force:n,parallel:s,autocrlf:l})})}catch(t){throw t.caller="git.add",t}}async function eO({dir:t,gitdir:e,fs:r,filepath:i,index:a,force:n,parallel:s,autocrlf:o}){let l=(i=Array.isArray(i)?i:[i]).map(async i=>{if(!n&&await e_.isIgnored({fs:r,dir:t,gitdir:e,filepath:i}))return;let l=await r.lstat(f.join(t,i));if(!l)throw new F(i);if(l.isDirectory()){let l=await r.readdir(f.join(t,i));if(s){let c=l.map(l=>eO({dir:t,gitdir:e,fs:r,filepath:[f.join(i,l)],index:a,force:n,parallel:s,autocrlf:o}));await Promise.all(c)}else for(let c of l)await eO({dir:t,gitdir:e,fs:r,filepath:[f.join(i,c)],index:a,force:n,parallel:s,autocrlf:o})}else{let n=l.isSymbolicLink()?await r.readlink(f.join(t,i)).then(eI):await r.read(f.join(t,i),{autocrlf:o});if(null===n)throw new F(i);let s=await eR({fs:r,gitdir:e,type:"blob",object:n});a.insert({filepath:i,stats:l,oid:s})}}),c=await Promise.allSettled(l),d=c.filter(t=>"rejected"===t.status).map(t=>t.reason);if(d.length>1)throw new tQ(d);if(1===d.length)throw d[0];return c.filter(t=>"fulfilled"===t.status&&t.value).map(t=>t.value)}async function eA({fs:t,gitdir:e,path:r}){return(await tf.get({fs:t,gitdir:e})).get(r)}function eC(t,...e){for(let r of e)if(r)for(let e of Object.keys(r)){let i=r[e];void 0!==i&&(t[e]=i)}return t}async function eU({fs:t,gitdir:e,author:r,commit:i}){let a=Math.floor(Date.now()/1e3),n=eC({},{name:await eA({fs:t,gitdir:e,path:"user.name"}),email:await eA({fs:t,gitdir:e,path:"user.email"})||"",timestamp:a,timezoneOffset:new Date(1e3*a).getTimezoneOffset()},i?i.author:void 0,r);if(void 0!==n.name)return n}async function eD({fs:t,gitdir:e,author:r,committer:i,commit:a}){let n=Math.floor(Date.now()/1e3),s=eC({},{name:await eA({fs:t,gitdir:e,path:"user.name"}),email:await eA({fs:t,gitdir:e,path:"user.email"})||"",timestamp:n,timezoneOffset:new Date(1e3*n).getTimezoneOffset()},a?a.committer:void 0,r,i);if(void 0!==s.name)return s}async function eN({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tB({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return eN({fs:t,cache:e,gitdir:r,oid:i=ei.from(n).parse().object});if("commit"!==a)throw new q(i,a,"commit");return{commit:en.from(n),oid:i}}async function eB({fs:t,cache:e,gitdir:r,oid:i}){let{commit:a,oid:n}=await eN({fs:t,cache:e,gitdir:r,oid:i});return{oid:n,commit:a.parse(),payload:a.withoutSignature()}}async function eM({fs:t,cache:e,onSign:r,gitdir:i,message:a,author:n,committer:s,signingKey:o,amend:l=!1,dryRun:c=!1,noUpdateBranch:f=!1,ref:d,parent:u,tree:h}){let w,m,p=!1;d||(d=await tw.resolve({fs:t,gitdir:i,ref:"HEAD",depth:2}));try{w=await tw.resolve({fs:t,gitdir:i,ref:d}),m=await eB({fs:t,gitdir:i,oid:w,cache:{}})}catch{p=!0}if(l&&p)throw new t5(d);let g=l?await eU({fs:t,gitdir:i,author:n,commit:m.commit}):await eU({fs:t,gitdir:i,author:n});if(!g)throw new tJ("author");let y=l?await eD({fs:t,gitdir:i,author:g,committer:s,commit:m.commit}):await eD({fs:t,gitdir:i,author:g,committer:s});if(!y)throw new tJ("committer");return B.acquire({fs:t,gitdir:i,cache:e,allowUnmerged:!1},async function(e){let n=H(e.entries).get(".");if(h||(h=await eT({fs:t,gitdir:i,inode:n,dryRun:c})),u=u?await Promise.all(u.map(e=>tw.resolve({fs:t,gitdir:i,ref:e}))):l?m.commit.parent:w?[w]:[],!a)if(l)a=m.commit.message;else throw new tX("message");let s=en.from({tree:h,parent:u,author:g,committer:y,message:a});o&&(s=await en.sign(s,r,o));let p=await eR({fs:t,gitdir:i,type:"commit",object:s.toObject(),dryRun:c});return f||c||await tw.writeRef({fs:t,gitdir:i,ref:d,value:p}),p})}async function eT({fs:t,gitdir:e,inode:r,dryRun:i}){let a=r.children;for(let r of a)"tree"===r.type&&(r.metadata.mode="040000",r.metadata.oid=await eT({fs:t,gitdir:e,inode:r,dryRun:i}));let n=a.map(t=>({mode:t.metadata.mode,path:t.basename,oid:t.metadata.oid,type:t.type})),s=tb.from(n);return await eR({fs:t,gitdir:e,type:"tree",object:s.toObject(),dryRun:i})}async function eH({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){if(a.startsWith("/"))throw new tL("leading-slash");if(a.endsWith("/"))throw new tL("trailing-slash");let n=i,s=await es({fs:t,cache:e,gitdir:r,oid:i}),o=s.tree;if(""===a)i=s.oid;else{let s=a.split("/");i=await eW({fs:t,cache:e,gitdir:r,tree:o,pathArray:s,oid:n,filepath:a})}return i}async function eW({fs:t,cache:e,gitdir:r,tree:i,pathArray:a,oid:n,filepath:s}){let o=a.shift();for(let l of i)if(l.path===o)if(0===a.length)return l.oid;else{let{type:o,object:c}=await tB({fs:t,cache:e,gitdir:r,oid:l.oid});if("tree"!==o)throw new q(n,o,"tree",s);return eW({fs:t,cache:e,gitdir:r,tree:i=tb.from(c),pathArray:a,oid:n,filepath:s})}throw new F(`file or directory found at "${n}:${s}"`)}async function ez({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){void 0!==a&&(i=await eH({fs:t,cache:e,gitdir:r,oid:i,filepath:a}));let{tree:n,oid:s}=await es({fs:t,cache:e,gitdir:r,oid:i});return{oid:s,tree:n.entries()}}async function eG({fs:t,gitdir:e,tree:r}){let i=tb.from(r).toObject();return await eR({fs:t,gitdir:e,type:"tree",object:i,format:"content"})}async function eF({fs:t,cache:e,onSign:r,gitdir:i,ref:a,oid:s,note:o,force:l,author:c,committer:f,signingKey:d}){let u;try{u=await tw.resolve({gitdir:i,fs:t,ref:a})}catch(t){if(!(t instanceof F))throw t}let h=(await ez({fs:t,cache:e,gitdir:i,oid:u||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;if(l)h=h.filter(t=>t.path!==s);else for(let t of h)if(t.path===s)throw new tM("note",s);"string"==typeof o&&(o=n.from(o,"utf8"));let w=await eR({fs:t,gitdir:i,type:"blob",object:o,format:"content"});h.push({mode:"100644",path:s,oid:w,type:"blob"});let m=await eG({fs:t,gitdir:i,tree:h});return await eM({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:m,parent:u&&[u],message:`Note added by 'isomorphic-git addNote'
`,author:c,committer:f,signingKey:d})}async function eq({fs:t,onSign:e,dir:r,gitdir:i=f.join(r,".git"),ref:a="refs/notes/commits",oid:n,note:s,force:o,author:l,committer:c,signingKey:d,cache:u={}}){try{e$("fs",t),e$("gitdir",i),e$("oid",n),e$("note",s),d&&e$("onSign",e);let r=new eb(t),f=await eU({fs:r,gitdir:i,author:l});if(!f)throw new tJ("author");let h=await eD({fs:r,gitdir:i,author:f,committer:c});if(!h)throw new tJ("committer");return await eF({fs:new eb(r),cache:u,onSign:e,gitdir:i,ref:a,oid:n,note:s,force:o,author:f,committer:h,signingKey:d})}catch(t){throw t.caller="git.addNote",t}}async function eL({fs:t,gitdir:e,remote:r,url:i,force:a}){if(r!==m.clean(r))throw new tV(r,m.clean(r));let n=await tf.get({fs:t,gitdir:e});if(!a&&(await n.getSubsections("remote")).includes(r)&&i!==await n.get(`remote.${r}.url`))throw new tM("remote",r);await n.set(`remote.${r}.url`,i),await n.set(`remote.${r}.fetch`,`+refs/heads/*:refs/remotes/${r}/*`),await tf.save({fs:t,gitdir:e,config:n})}async function eV({fs:t,dir:e,gitdir:r=f.join(e,".git"),remote:i,url:a,force:n=!1}){try{return e$("fs",t),e$("gitdir",r),e$("remote",i),e$("url",a),await eL({fs:new eb(t),gitdir:r,remote:i,url:a,force:n})}catch(t){throw t.caller="git.addRemote",t}}async function eK({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tagger:n,message:s=a,gpgsig:o,object:l,signingKey:c,force:f=!1}){if(a=a.startsWith("refs/tags/")?a:`refs/tags/${a}`,!f&&await tw.exists({fs:t,gitdir:i,ref:a}))throw new tM("tag",a);let d=await tw.resolve({fs:t,gitdir:i,ref:l||"HEAD"}),{type:u}=await tB({fs:t,cache:e,gitdir:i,oid:d}),h=ei.from({object:d,type:u,tag:a.replace("refs/tags/",""),tagger:n,message:s,gpgsig:o});c&&(h=await ei.sign(h,r,c));let w=await eR({fs:t,gitdir:i,type:"tag",object:h.toObject()});await tw.writeRef({fs:t,gitdir:i,ref:a,value:w})}async function eZ({fs:t,onSign:e,dir:r,gitdir:i=f.join(r,".git"),ref:a,tagger:n,message:s=a,gpgsig:o,object:l,signingKey:c,force:d=!1,cache:u={}}){try{e$("fs",t),e$("gitdir",i),e$("ref",a),c&&e$("onSign",e);let r=new eb(t),f=await eU({fs:r,gitdir:i,author:n});if(!f)throw new tJ("tagger");return await eK({fs:r,cache:u,onSign:e,gitdir:i,ref:a,tagger:f,message:s,gpgsig:o,object:l,signingKey:c,force:d})}catch(t){throw t.caller="git.annotatedTag",t}}async function eY({fs:t,gitdir:e,ref:r,object:i,checkout:a=!1,force:n=!1}){let s;if(r!==m.clean(r))throw new tV(r,m.clean(r));let o=`refs/heads/${r}`;if(!n&&await tw.exists({fs:t,gitdir:e,ref:o}))throw new tM("branch",r,!1);try{s=await tw.resolve({fs:t,gitdir:e,ref:i||"HEAD"})}catch(t){}s&&await tw.writeRef({fs:t,gitdir:e,ref:o,value:s}),a&&await tw.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:o})}async function eJ({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i,object:a,checkout:n=!1,force:s=!1}){try{return e$("fs",t),e$("gitdir",r),e$("ref",i),await eY({fs:new eb(t),gitdir:r,ref:i,object:a,checkout:n,force:s})}catch(t){throw t.caller="git.branch",t}}let eX=(t,e)=>"."===t||null==e||0===e.length||"."===e||(e.length>=t.length?e.startsWith(t):t.startsWith(e));async function eQ({fs:t,cache:e,onProgress:r,onPostCheckout:i,dir:a,gitdir:n,remote:s,ref:o,filepaths:l,noCheckout:c,noUpdateHead:f,dryRun:d,force:u,track:h=!0,nonBlocking:w=!1,batchSize:m=100}){let p,g;if(i)try{p=await tw.resolve({fs:t,gitdir:n,ref:"HEAD"})}catch(t){p="0000000000000000000000000000000000000000"}try{g=await tw.resolve({fs:t,gitdir:n,ref:o})}catch(r){if("HEAD"===o)throw r;let e=`${s}/${o}`;if(g=await tw.resolve({fs:t,gitdir:n,ref:e}),h){let e=await tf.get({fs:t,gitdir:n});await e.set(`branch.${o}.remote`,s),await e.set(`branch.${o}.merge`,`refs/heads/${o}`),await tf.save({fs:t,gitdir:n,config:e})}await tw.writeRef({fs:t,gitdir:n,ref:`refs/heads/${o}`,value:g})}if(!c){let s;try{s=await e0({fs:t,cache:e,onProgress:r,dir:a,gitdir:n,ref:o,force:u,filepaths:l})}catch(t){if(t instanceof F&&t.data.what===g)throw new tW(o,g);throw t}let c=s.filter(([t])=>"conflict"===t).map(([t,e])=>e);if(c.length>0)throw new tH(c);let f=s.filter(([t])=>"error"===t).map(([t,e])=>e);if(f.length>0)throw new b(f.join(", "));if(d){i&&await i({previousHead:p,newHead:g,type:null!=l&&l.length>0?"file":"branch"});return}let h=0,y=s.length;if(await B.acquire({fs:t,gitdir:n,cache:e},async function(e){await Promise.all(s.filter(([t])=>"delete"===t||"delete-index"===t).map(async function([i,n]){let s=`${a}/${n}`;"delete"===i&&await t.rm(s),e.delete({filepath:n}),r&&await r({phase:"Updating workdir",loaded:++h,total:y})}))}),await B.acquire({fs:t,gitdir:n,cache:e},async function(e){for(let[i,n]of s)if("rmdir"===i||"rmdir-index"===i){let s=`${a}/${n}`;try{"rmdir"===i&&await t.rmdir(s),e.delete({filepath:n}),r&&await r({phase:"Updating workdir",loaded:++h,total:y})}catch(t){if("ENOTEMPTY"===t.code)console.log(`Did not delete ${n} because directory is not empty`);else throw t}}}),await Promise.all(s.filter(([t])=>"mkdir"===t||"mkdir-index"===t).map(async function([e,i]){let n=`${a}/${i}`;await t.mkdir(n),r&&await r({phase:"Updating workdir",loaded:++h,total:y})})),w){let i=s.filter(([t])=>"create"===t||"create-index"===t||"update"===t||"mkdir-index"===t),o=await e8("Update Working Dir",i.map(([r,i,s,o,l])=>()=>e2({fs:t,cache:e,gitdir:n,dir:a},[r,i,s,o,l])),r,m);await B.acquire({fs:t,gitdir:n,cache:e,allowUnmerged:!0},async function(t){await e8("Update Index",o.map(([e,r,i])=>()=>e1({index:t,fullpath:e,oid:r,stats:i})),r,m)})}else await B.acquire({fs:t,gitdir:n,cache:e,allowUnmerged:!0},async function(i){await Promise.all(s.filter(([t])=>"create"===t||"create-index"===t||"update"===t||"mkdir-index"===t).map(async function([s,o,l,c,f]){let d=`${a}/${o}`;try{if("create-index"!==s&&"mkdir-index"!==s){let{object:r}=await tB({fs:t,cache:e,gitdir:n,oid:l});if(f&&await t.rm(d),33188===c)await t.write(d,r);else if(33261===c)await t.write(d,r,{mode:511});else if(40960===c)await t.writelink(d,r);else throw new b(`Invalid mode 0o${c.toString(8)} detected in blob ${l}`)}let a=await t.lstat(d);33261===c&&(a.mode=493),"mkdir-index"===s&&(a.mode=57344),i.insert({filepath:o,stats:a,oid:l}),r&&await r({phase:"Updating workdir",loaded:++h,total:y})}catch(t){console.log(t)}}))});i&&await i({previousHead:p,newHead:g,type:null!=l&&l.length>0?"file":"branch"})}if(!f){let e=await tw.expand({fs:t,gitdir:n,ref:o});e.startsWith("refs/heads")?await tw.writeSymbolicRef({fs:t,gitdir:n,ref:"HEAD",value:e}):await tw.writeRef({fs:t,gitdir:n,ref:"HEAD",value:g})}}async function e0({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,ref:n,force:s,filepaths:o}){let l=0;return eh({fs:t,cache:e,dir:i,gitdir:a,trees:[el({ref:n}),ef(),G()],map:async function(t,[e,i,a]){if("."!==t){if(o&&!o.some(e=>eX(t,e)))return null;switch(r&&await r({phase:"Analyzing workdir",loaded:++l}),[!!a,!!e,!!i].map(Number).join("")){case"000":return;case"001":if(s&&o&&o.includes(t))return["delete",t];return;case"010":switch(await e.type()){case"tree":return["mkdir",t];case"blob":return["create",t,await e.oid(),await e.mode()];case"commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`new entry Unhandled type ${await e.type()}`]}case"011":switch(`${await e.type()}-${await i.type()}`){case"tree-tree":case"commit-tree":return;case"tree-blob":case"blob-tree":case"commit-blob":return["conflict",t];case"blob-blob":if(await e.oid()!==await i.oid())if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()];else return["conflict",t];if(await e.mode()===await i.mode())return["create-index",t,await e.oid(),await e.mode()];if(s)return["update",t,await e.oid(),await e.mode(),!0];else return["conflict",t];default:return["error",`new entry Unhandled type ${e.type}`]}case"100":return["delete-index",t];case"101":switch(await a.type()){case"tree":case"commit":return["rmdir-index",t];case"blob":if(await a.oid()===await i.oid())return["delete",t];if(s)return["delete",t];return["conflict",t];default:return["error",`delete entry Unhandled type ${await a.type()}`]}case"110":case"111":switch(`${await a.type()}-${await e.type()}`){case"tree-tree":return;case"blob-blob":if(await a.oid()===await e.oid()&&await a.mode()===await e.mode()&&!s)return;if(i){if(await i.oid()!==await a.oid()&&await i.oid()!==await e.oid())if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()];else return["conflict",t]}else if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await a.mode()];if(await e.mode()!==await a.mode())return["update",t,await e.oid(),await e.mode(),!0];if(await e.oid()!==await a.oid())return["update",t,await e.oid(),await e.mode(),!1];return;case"tree-blob":return["update-dir-to-blob",t,await e.oid()];case"blob-tree":return["update-blob-to-tree",t];case"commit-commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`update entry Unhandled type ${await a.type()}-${await e.type()}`]}}}},reduce:async function(t,e){return e=ed(e),t&&(t&&"rmdir"===t[0]?e.push(t):e.unshift(t)),e}})}async function e1({index:t,fullpath:e,stats:r,oid:i}){try{t.insert({filepath:e,stats:r,oid:i})}catch(t){console.warn(`Error inserting ${e} into index:`,t)}}async function e2({fs:t,cache:e,gitdir:r,dir:i},[a,n,s,o,l]){let c=`${i}/${n}`;if("create-index"!==a&&"mkdir-index"!==a){let{object:i}=await tB({fs:t,cache:e,gitdir:r,oid:s});if(l&&await t.rm(c),33188===o)await t.write(c,i);else if(33261===o)await t.write(c,i,{mode:511});else if(40960===o)await t.writelink(c,i);else throw new b(`Invalid mode 0o${o.toString(8)} detected in blob ${s}`)}let f=await t.lstat(c);return 33261===o&&(f.mode=493),"mkdir-index"===a&&(f.mode=57344),[n,s,f]}async function e8(t,e,r,i){let a=[];try{for(let t=0;t<e.length;t+=i){let n=e.slice(t,t+i).map(t=>t());(await Promise.allSettled(n)).forEach(t=>{"fulfilled"===t.status&&a.push(t.value)}),r&&await r({phase:"Updating workdir",loaded:t+n.length,total:e.length})}}catch(e){console.error(`Error during ${t}: ${e}`)}return a}async function e4({fs:t,onProgress:e,onPostCheckout:r,dir:i,gitdir:a=f.join(i,".git"),remote:n="origin",ref:s,filepaths:o,noCheckout:l=!1,noUpdateHead:c=void 0===s,dryRun:d=!1,force:u=!1,track:h=!0,cache:w={},nonBlocking:m=!1,batchSize:p=100}){try{return e$("fs",t),e$("dir",i),e$("gitdir",a),await eQ({fs:new eb(t),cache:w,onProgress:e,onPostCheckout:r,dir:i,gitdir:a,remote:n,ref:s||"HEAD",filepaths:o,noCheckout:l,noUpdateHead:c,dryRun:d,force:u,track:h,nonBlocking:m,batchSize:p})}catch(t){throw t.caller="git.checkout",t}}let e3=RegExp("^refs/(heads/|tags/|remotes/)?(.*)");function e6(t){let e=e3.exec(t);if(e)if("remotes/"===e[1]&&t.endsWith("/HEAD"))return e[2].slice(0,-5);else return e[2];return t}async function e9({fs:t,gitdir:e,fullname:r=!1,test:i=!1}){let a=await tw.resolve({fs:t,gitdir:e,ref:"HEAD",depth:2});if(i)try{await tw.resolve({fs:t,gitdir:e,ref:a})}catch(t){return}if(a.startsWith("refs/"))return r?a:e6(a)}function e5({username:t="",password:e=""}){return`Basic ${n.from(`${t}:${e}`).toString("base64")}`}async function e7(t,e){let r=tE(t);for(;;){let{value:t,done:i}=await r.next();if(t&&await e(t),i)break}r.return&&r.return()}async function rt(t){let e=0,r=[];await e7(t,t=>{r.push(t),e+=t.byteLength});let i=new Uint8Array(e),a=0;for(let t of r)i.set(t,a),a+=t.byteLength;return i}function re(t){let e=t.match(/^https?:\/\/([^/]+)@/);if(null==e)return{url:t,auth:{}};let[r,i]=(e=e[1]).split(":");return{url:t=t.replace(`${e}@`,""),auth:{username:r,password:i}}}function rr(t,e){let r=e.toString(16);return"0".repeat(t-r.length)+r}class ri{static flush(){return n.from("0000","utf8")}static delim(){return n.from("0001","utf8")}static encode(t){"string"==typeof t&&(t=n.from(t));let e=rr(4,t.length+4);return n.concat([n.from(e,"utf8"),t])}static streamReader(t){let e=new tS(t);return async function(){try{let t=await e.read(4);if(null==t)return!0;if(t=parseInt(t.toString("utf8"),16),0===t||1===t)return null;let r=await e.read(t-4);if(null==r)return!0;return r}catch(e){return t.error=e,!0}}}}async function ra(t){let e,r={};for(;!0!==(e=await t());){if(null===e)continue;let t=(e=e.toString("utf8").replace(/\n$/,"")).indexOf("=");if(t>-1){let i=e.slice(0,t),a=e.slice(t+1);r[i]=a}else r[e]=!0}return{protocolVersion:2,capabilities2:r}}async function rn(t,{service:e}){let r=new Set,i=new Map,a=new Map,n=ri.streamReader(t),s=await n();for(;null===s;)s=await n();if(!0===s)throw new tz;if(s.includes("version 2"))return ra(n);if(s.toString("utf8").replace(/\n$/,"")!==`# service=${e}`)throw new t0(`# service=${e}\\n`,s.toString("utf8"));let o=await n();for(;null===o;)o=await n();if(!0===o)return{capabilities:r,refs:i,symrefs:a};if((o=o.toString("utf8")).includes("version 2"))return ra(n);let[l,c]=rs(o,"\0","\\x00");if(c.split(" ").map(t=>r.add(t)),"0000000000000000000000000000000000000000 capabilities^{}"!==l){let[t,e]=rs(l," "," ");for(i.set(e,t);;){let t=await n();if(!0===t)break;if(null!==t){let[e,r]=rs(t.toString("utf8")," "," ");i.set(r,e)}}}for(let t of r)if(t.startsWith("symref=")){let e=t.match(/symref=([^:]+):(.*)/);3===e.length&&a.set(e[1],e[2])}return{protocolVersion:1,capabilities:r,refs:i,symrefs:a}}function rs(t,e,r){let i=t.trim().split(e);if(2!==i.length)throw new t0(`Two strings separated by '${r}'`,t.toString("utf8"));return i}let ro=(t,e)=>t.endsWith("?")?`${t}${e}`:`${t}/${e.replace(/^https?:\/\//,"")}`,rl=(t,e)=>{(e.username||e.password)&&(t.Authorization=e5(e)),e.headers&&Object.assign(t,e.headers)},rc=async t=>{try{let e=n.from(await rt(t.body)),r=e.toString("utf8");return{preview:r.length<256?r:r.slice(0,256)+"...",response:r,data:e}}catch(t){return{}}};class rf{static async capabilities(){return["discover","connect"]}static async discover({http:t,onProgress:e,onAuth:r,onAuthSuccess:i,onAuthFailure:a,corsProxy:n,service:s,url:o,headers:l,protocolVersion:c}){let f,d,{url:u,auth:h}=re(o),w=n?ro(n,u):u;(h.username||h.password)&&(l.Authorization=e5(h)),2===c&&(l["Git-Protocol"]="version=2");let m=!1;do if(f=await t.request({onProgress:e,method:"GET",url:`${w}/info/refs?service=${s}`,headers:l}),d=!1,401===f.statusCode||203===f.statusCode){let t=m?a:r;if(t){if((h=await t(u,{...h,headers:{...l}}))&&h.cancel)throw new t6;h&&(rl(l,h),m=!0,d=!0)}}else 200===f.statusCode&&m&&i&&await i(u,h);while(d);if(200!==f.statusCode){let{response:t}=await rc(f);throw new tq(f.statusCode,f.statusMessage,t)}if(f.headers["content-type"]===`application/x-${s}-advertisement`){let t=await rn(f.body,{service:s});return t.auth=h,t}{let{preview:t,response:e,data:r}=await rc(f);try{let t=await rn([r],{service:s});return t.auth=h,t}catch(r){throw new t8(t,e)}}}static async connect({http:t,onProgress:e,corsProxy:r,service:i,url:a,auth:n,body:s,headers:o}){let l=re(a);l&&(a=l.url),r&&(a=ro(r,a)),o["content-type"]=`application/x-${i}-request`,o.accept=`application/x-${i}-result`,rl(o,n);let c=await t.request({onProgress:e,method:"POST",url:`${a}/${i}`,body:s,headers:o});if(200!==c.statusCode){let{response:t}=rc(c);throw new tq(c.statusCode,c.statusMessage,t)}return c}}class rd{static getRemoteHelperFor({url:t}){let e=new Map;e.set("http",rf),e.set("https",rf);let r=function({url:t}){if(t.startsWith("git@"))return{transport:"ssh",address:t};let e=t.match(/(\w+)(:\/\/|::)(.*)/);if(null!==e){if("://"===e[2])return{transport:e[1],address:e[0]};if("::"===e[2])return{transport:e[1],address:e[3]}}}({url:t});if(!r)throw new t3(t);if(e.has(r.transport))return e.get(r.transport);throw new t4(t,r.transport,"ssh"===r.transport?t.replace(/^git@([^:]+):/,"https://$1/").replace(/^ssh:\/\//,"https://"):void 0)}}let ru=null;class rh{static async read({fs:t,gitdir:e}){null===ru&&(ru=new l);let r=f.join(e,"shallow"),i=new Set;return await ru.acquire(r,async function(){let e=await t.read(r,{encoding:"utf8"});if(null===e||""===e.trim())return i;e.trim().split("\n").map(t=>i.add(t))}),i}static async write({fs:t,gitdir:e,oids:r}){null===ru&&(ru=new l);let i=f.join(e,"shallow");if(r.size>0){let e=[...r].join("\n")+"\n";await ru.acquire(i,async function(){await t.write(i,e,{encoding:"utf8"})})}else await ru.acquire(i,async function(){await t.rm(i)})}}async function rw({fs:t,gitdir:e,oid:r}){let i=`objects/${r.slice(0,2)}/${r.slice(2)}`;return t.exists(`${e}/${i}`)}async function rm({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let n=await t.readdir(f.join(r,"objects/pack"));for(let s of n=n.filter(t=>t.endsWith(".idx"))){let n=`${r}/objects/pack/${s}`,o=await tD({fs:t,cache:e,filename:n,getExternalRefDelta:a});if(o.error)throw new b(o.error);if(o.offsets.has(i))return!0}return!1}async function rp({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){let n=await rw({fs:t,gitdir:r,oid:i});return n||(n=await rm({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tB({fs:t,cache:e,gitdir:r,oid:i})})),n}function rg(t,e){let r=t.map(t=>t.split("=",1)[0]);return e.filter(t=>{let e=t.split("=",1)[0];return r.includes(e)})}let ry={version:"1.32.2",agent:"git/isomorphic-git@1.32.2"};class rb{constructor(){this._queue=[]}write(t){if(this._ended)throw Error("You cannot write to a FIFO that has already been ended!");if(this._waiting){let e=this._waiting;this._waiting=null,e({value:t})}else this._queue.push(t)}end(){if(this._ended=!0,this._waiting){let t=this._waiting;this._waiting=null,t({done:!0})}}destroy(t){this.error=t,this.end()}async next(){if(this._queue.length>0)return{value:this._queue.shift()};if(this._ended)return{done:!0};if(this._waiting)throw Error("You cannot call read until the previous call to read has returned!");return new Promise(t=>{this._waiting=t})}}function r$(t){let e=new rb,r="";return(async()=>{await e7(t,t=>{for(t=t.toString("utf8"),r+=t;;){let t=function(t){let e=t.indexOf("\r"),r=t.indexOf("\n");return -1===e&&-1===r?-1:-1===e?r+1:-1===r?e+1:r===e+1?r+1:Math.min(e,r)+1}(r);if(-1===t)break;e.write(r.slice(0,t)),r=r.slice(t)}}),r.length>0&&e.write(r),e.end()})(),e}class rx{static demux(t){let e=ri.streamReader(t),r=new rb,i=new rb,a=new rb,n=async function(){let s=await e();if(null===s)return n();if(!0===s){r.end(),a.end(),t.error?i.destroy(t.error):i.end();return}switch(s[0]){case 1:i.write(s.slice(1));break;case 2:a.write(s.slice(1));break;case 3:{let t=s.slice(1);a.write(t),r.end(),a.end(),i.destroy(Error(t.toString("utf8")));return}default:r.write(s)}n()};return n(),{packetlines:r,packfile:i,progress:a}}}async function rv(t){let{packetlines:e,packfile:r,progress:i}=rx.demux(t),a=[],n=[],s=[],o=!1,l=!1;return new Promise((c,f)=>{e7(e,e=>{let d=e.toString("utf8").trim();if(d.startsWith("shallow")){let t=d.slice(-41).trim();40!==t.length&&f(new L(t)),a.push(t)}else if(d.startsWith("unshallow")){let t=d.slice(-41).trim();40!==t.length&&f(new L(t)),n.push(t)}else if(d.startsWith("ACK")){let[,t,e]=d.split(" ");s.push({oid:t,status:e}),e||(l=!0)}else d.startsWith("NAK")?(o=!0,l=!0):(l=!0,o=!0);l&&(t.error?f(t.error):c({shallows:a,unshallows:n,acks:s,nak:o,packfile:r,progress:i}))}).finally(()=>{l||(t.error?f(t.error):c({shallows:a,unshallows:n,acks:s,nak:o,packfile:r,progress:i}))})})}async function r_({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:o,onAuthFailure:l,gitdir:c,ref:d,remoteRef:u,remote:h,url:w,corsProxy:m,depth:p=null,since:g=null,exclude:y=[],relative:b=!1,tags:$=!1,singleBranch:x=!1,headers:v={},prune:_=!1,pruneTags:j=!1}){let E=d||await e9({fs:t,gitdir:c,test:!0}),S=await tf.get({fs:t,gitdir:c}),k=h||E&&await S.get(`branch.${E}.remote`)||"origin",R=w||await S.get(`remote.${k}.url`);if(void 0===R)throw new tX("remote OR url");let I=u||E&&await S.get(`branch.${E}.merge`)||d||"HEAD";void 0===m&&(m=await S.get("http.corsProxy"));let P=rd.getRemoteHelperFor({url:R}),O=await P.discover({http:r,onAuth:s,onAuthSuccess:o,onAuthFailure:l,corsProxy:m,service:"git-upload-pack",url:R,headers:v,protocolVersion:1}),A=O.auth,C=O.refs;if(0===C.size)return{defaultBranch:null,fetchHead:null,fetchHeadDescription:null};if(null!==p&&!O.capabilities.has("shallow"))throw new t2("shallow","depth");if(null!==g&&!O.capabilities.has("deepen-since"))throw new t2("deepen-since","since");if(y.length>0&&!O.capabilities.has("deepen-not"))throw new t2("deepen-not","exclude");if(!0===b&&!O.capabilities.has("deepen-relative"))throw new t2("deepen-relative","relative");let{oid:U,fullref:D}=tw.resolveAgainstMap({ref:I,map:C});for(let t of C.keys())t===D||"HEAD"===t||t.startsWith("refs/heads/")||$&&t.startsWith("refs/tags/")||C.delete(t);let N=rg([...O.capabilities],["multi_ack_detailed","no-done","side-band-64k","ofs-delta",`agent=${ry.agent}`]);b&&N.push("deepen-relative");let B=x?[U]:C.values(),M=x?[E]:await tw.listRefs({fs:t,gitdir:c,filepath:"refs"}),T=[];for(let r of M)try{r=await tw.expand({fs:t,gitdir:c,ref:r});let i=await tw.resolve({fs:t,gitdir:c,ref:r});await rp({fs:t,cache:e,gitdir:c,oid:i})&&T.push(i)}catch(t){}T=[...new Set(T)];let H=await rh.read({fs:t,gitdir:c}),W=function({capabilities:t=[],wants:e=[],haves:r=[],shallows:i=[],depth:a=null,since:n=null,exclude:s=[]}){let o=[];e=[...new Set(e)];let l=` ${t.join(" ")}`;for(let t of e)o.push(ri.encode(`want ${t}${l}
`)),l="";for(let t of i)o.push(ri.encode(`shallow ${t}
`));for(let t of(null!==a&&o.push(ri.encode(`deepen ${a}
`)),null!==n&&o.push(ri.encode(`deepen-since ${Math.floor(n.valueOf()/1e3)}
`)),s))o.push(ri.encode(`deepen-not ${t}
`));for(let t of(o.push(ri.flush()),r))o.push(ri.encode(`have ${t}
`));return o.push(ri.encode(`done
`)),o}({capabilities:N,wants:B,haves:T,shallows:O.capabilities.has("shallow")?[...H]:[],depth:p,since:g,exclude:y}),z=n.from(await rt(W)),G=await P.connect({http:r,onProgress:i,corsProxy:m,service:"git-upload-pack",url:R,auth:A,body:[z],headers:v}),F=await rv(G.body);for(let r of(G.headers&&(F.headers=G.headers),F.shallows))if(!H.has(r))try{let{object:i}=await tB({fs:t,cache:e,gitdir:c,oid:r}),a=new en(i),n=await Promise.all(a.headers().parent.map(r=>rp({fs:t,cache:e,gitdir:c,oid:r})));0===n.length||n.every(t=>t)||H.add(r)}catch(t){H.add(r)}for(let t of F.unshallows)H.delete(t);if(await rh.write({fs:t,gitdir:c,oids:H}),x){let e=new Map([[D,U]]),r=new Map,i=10,a=D;for(;i--;){let t=O.symrefs.get(a);if(void 0===t)break;r.set(a,t),a=t}let n=C.get(a);n&&e.set(a,n);let{pruned:s}=await tw.updateRemoteRefs({fs:t,gitdir:c,remote:k,refs:e,symrefs:r,tags:$,prune:_});_&&(F.pruned=s)}else{let{pruned:e}=await tw.updateRemoteRefs({fs:t,gitdir:c,remote:k,refs:C,symrefs:O.symrefs,tags:$,prune:_,pruneTags:j});_&&(F.pruned=e)}if(F.HEAD=O.symrefs.get("HEAD"),void 0===F.HEAD){let{oid:t}=tw.resolveAgainstMap({ref:"HEAD",map:C});for(let[e,r]of C.entries())if("HEAD"!==e&&r===t){F.HEAD=e;break}}let q=D.startsWith("refs/tags")?"tag":"branch";F.FETCH_HEAD={oid:U,description:`${q} '${e6(D)}' of ${R}`},(i||a)&&e7(r$(F.progress),async t=>{if(a&&await a(t),i){let e=t.match(/([^:]*).*\((\d+?)\/(\d+?)\)/);e&&await i({phase:e[1].trim(),loaded:parseInt(e[2],10),total:parseInt(e[3],10)})}});let L=n.from(await rt(F.packfile));if(G.body.error)throw G.body.error;let V=L.slice(-20).toString("hex"),K={defaultBranch:F.HEAD,fetchHead:F.FETCH_HEAD.oid,fetchHeadDescription:F.FETCH_HEAD.description};if(F.headers&&(K.headers=F.headers),_&&(K.pruned=F.pruned),""!==V&&"5041434b0000000200000000"!==L.slice(0,12).toString("hex")){K.packfile=`objects/pack/pack-${V}.pack`;let r=f.join(c,K.packfile);await t.write(r,L);let a=await tA.fromPack({pack:L,getExternalRefDelta:r=>tB({fs:t,cache:e,gitdir:c,oid:r}),onProgress:i});await t.write(r.replace(/\.pack$/,".idx"),await a.toBuffer())}return K}async function rj({fs:t,bare:e=!1,dir:r,gitdir:i=e?r:f.join(r,".git"),defaultBranch:a="master"}){if(await t.exists(i+"/config"))return;let n=["hooks","info","objects/info","objects/pack","refs/heads","refs/tags"];for(let e of n=n.map(t=>i+"/"+t))await t.mkdir(e);await t.write(i+"/config",`[core]
	repositoryformatversion = 0
	filemode = false
	bare = ${e}
`+(e?"":"	logallrefupdates = true\n")+"	symlinks = false\n	ignorecase = true\n"),await t.write(i+"/HEAD",`ref: refs/heads/${a}
`)}async function rE({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,onPostCheckout:l,dir:c,gitdir:f,url:d,corsProxy:u,ref:h,remote:w,depth:m,since:p,exclude:g,relative:y,singleBranch:b,noCheckout:$,noTags:x,headers:v,nonBlocking:_,batchSize:j=100}){try{if(await rj({fs:t,gitdir:f}),await eL({fs:t,gitdir:f,remote:w,url:d,force:!1}),u){let e=await tf.get({fs:t,gitdir:f});await e.set("http.corsProxy",u),await tf.save({fs:t,gitdir:f,config:e})}let{defaultBranch:E,fetchHead:S}=await r_({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:f,ref:h,remote:w,corsProxy:u,depth:m,since:p,exclude:g,relative:y,singleBranch:b,headers:v,tags:!x});if(null===S)return;h=(h=h||E).replace("refs/heads/",""),await eQ({fs:t,cache:e,onProgress:i,onPostCheckout:l,dir:c,gitdir:f,ref:h,remote:w,noCheckout:$,nonBlocking:_,batchSize:j})}catch(e){throw await t.rmdir(f,{recursive:!0,maxRetries:10}).catch(()=>void 0),e}}async function rS({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,onPostCheckout:o,dir:l,gitdir:c=f.join(l,".git"),url:d,corsProxy:u,ref:h,remote:w="origin",depth:m,since:p,exclude:g=[],relative:y=!1,singleBranch:b=!1,noCheckout:$=!1,noTags:x=!1,headers:v={},cache:_={},nonBlocking:j=!1,batchSize:E=100}){try{return e$("fs",t),e$("http",e),e$("gitdir",c),$||e$("dir",l),e$("url",d),await rE({fs:new eb(t),cache:_,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,onPostCheckout:o,dir:l,gitdir:c,url:d,corsProxy:u,ref:h,remote:w,depth:m,since:p,exclude:g,relative:y,singleBranch:b,noCheckout:$,noTags:x,headers:v,nonBlocking:j,batchSize:E})}catch(t){throw t.caller="git.clone",t}}async function rk({fs:t,onSign:e,dir:r,gitdir:i=f.join(r,".git"),message:a,author:n,committer:s,signingKey:o,amend:l=!1,dryRun:c=!1,noUpdateBranch:d=!1,ref:u,parent:h,tree:w,cache:m={}}){try{e$("fs",t),l||e$("message",a),o&&e$("onSign",e);let r=new eb(t);return await eM({fs:r,cache:m,onSign:e,gitdir:i,message:a,author:n,committer:s,signingKey:o,amend:l,dryRun:c,noUpdateBranch:d,ref:u,parent:h,tree:w})}catch(t){throw t.caller="git.commit",t}}async function rR({fs:t,dir:e,gitdir:r=f.join(e,".git"),fullname:i=!1,test:a=!1}){try{return e$("fs",t),e$("gitdir",r),await e9({fs:new eb(t),gitdir:r,fullname:i,test:a})}catch(t){throw t.caller="git.currentBranch",t}}async function rI({fs:t,gitdir:e,ref:r}){if(r=r.startsWith("refs/heads/")?r:`refs/heads/${r}`,!await tw.exists({fs:t,gitdir:e,ref:r}))throw new F(r);let i=await tw.expand({fs:t,gitdir:e,ref:r});if(i===await e9({fs:t,gitdir:e,fullname:!0})){let r=await tw.resolve({fs:t,gitdir:e,ref:i});await tw.writeRef({fs:t,gitdir:e,ref:"HEAD",value:r})}await tw.deleteRef({fs:t,gitdir:e,ref:i});let a=e6(r),n=await tf.get({fs:t,gitdir:e});await n.deleteSection("branch",a),await tf.save({fs:t,gitdir:e,config:n})}async function rP({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i}){try{return e$("fs",t),e$("ref",i),await rI({fs:new eb(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteBranch",t}}async function rO({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i}){try{e$("fs",t),e$("ref",i),await tw.deleteRef({fs:new eb(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteRef",t}}async function rA({fs:t,gitdir:e,remote:r}){let i=await tf.get({fs:t,gitdir:e});await i.deleteSection("remote",r),await tf.save({fs:t,gitdir:e,config:i})}async function rC({fs:t,dir:e,gitdir:r=f.join(e,".git"),remote:i}){try{return e$("fs",t),e$("remote",i),await rA({fs:new eb(t),gitdir:r,remote:i})}catch(t){throw t.caller="git.deleteRemote",t}}async function rU({fs:t,gitdir:e,ref:r}){r=r.startsWith("refs/tags/")?r:`refs/tags/${r}`,await tw.deleteRef({fs:t,gitdir:e,ref:r})}async function rD({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i}){try{return e$("fs",t),e$("ref",i),await rU({fs:new eb(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteTag",t}}async function rN({fs:t,gitdir:e,oid:r}){let i=r.slice(0,2);return(await t.readdir(`${e}/objects/${i}`)).map(t=>`${i}${t}`).filter(t=>t.startsWith(r))}async function rB({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let n=[],s=await t.readdir(f.join(r,"objects/pack"));for(let o of s=s.filter(t=>t.endsWith(".idx"))){let s=`${r}/objects/pack/${o}`,l=await tD({fs:t,cache:e,filename:s,getExternalRefDelta:a});if(l.error)throw new b(l.error);for(let t of l.offsets.keys())t.startsWith(i)&&n.push(t)}return n}async function rM({fs:t,cache:e,gitdir:r,oid:i}){let a=await rN({fs:t,gitdir:r,oid:i});for(let n of(await rB({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tB({fs:t,cache:e,gitdir:r,oid:i})})))-1===a.indexOf(n)&&a.push(n);if(1===a.length)return a[0];if(a.length>1)throw new tT("oids",i,a);throw new F(`an object matching "${i}"`)}async function rT({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,cache:a={}}){try{return e$("fs",t),e$("gitdir",r),e$("oid",i),await rM({fs:new eb(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.expandOid",t}}async function rH({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i}){try{return e$("fs",t),e$("gitdir",r),e$("ref",i),await tw.expand({fs:new eb(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.expandRef",t}}async function rW({fs:t,cache:e,gitdir:r,oids:i}){let a={},n=i.length,s=i.map((t,e)=>({index:e,oid:t}));for(;s.length;){let i=new Set;for(let{oid:t,index:e}of s)a[t]||(a[t]=new Set),a[t].add(e),a[t].size===n&&i.add(t);if(i.size>0)return[...i];let o=new Map;for(let{oid:i,index:n}of s)try{let{object:s}=await tB({fs:t,cache:e,gitdir:r,oid:i}),{parent:l}=en.from(s).parseHeaders();for(let t of l)a[t]&&a[t].has(n)||o.set(t+":"+n,{oid:t,index:n})}catch(t){}s=Array.from(o.values())}return[]}let rz=/^.*(\r?\n|$)/gm;function rG({branches:t,contents:e}){let r=t[1],i=t[2],a=e[0],n=e[1],s=e[2],o=n.match(rz),l=p(o,a.match(rz),s.match(rz)),c="",f=!0;for(let t of l)t.ok&&(c+=t.ok.join("")),t.conflict&&(f=!1,c+=`${"<".repeat(7)} ${r}
`,c+=t.conflict.a.join(""),c+=`${"=".repeat(7)}
`,c+=t.conflict.b.join(""),c+=`${">".repeat(7)} ${i}
`);return{cleanMerge:f,mergedText:c}}async function rF({fs:t,cache:e,dir:r,gitdir:i=f.join(r,".git"),index:a,ourOid:n,baseOid:s,theirOid:o,ourName:l="ours",baseName:c="base",theirName:d="theirs",dryRun:u=!1,abortOnConflict:h=!0,mergeDriver:w}){let m=el({ref:n}),p=el({ref:s}),g=el({ref:o}),y=[],b=[],$=[],x=[],v=await eh({fs:t,cache:e,dir:r,gitdir:i,trees:[m,p,g],map:async function(e,[r,n,s]){let o=M(e),f=await ex(r,n),u=await ex(s,n);switch(`${f}-${u}`){case"false-false":return{mode:await n.mode(),path:o,oid:await n.oid(),type:await n.type()};case"false-true":if(!s&&await r.type()==="tree")return{mode:await r.mode(),path:o,oid:await r.oid(),type:await r.type()};return s?{mode:await s.mode(),path:o,oid:await s.oid(),type:await s.type()}:void 0;case"true-false":if(!r&&await s.type()==="tree")return{mode:await s.mode(),path:o,oid:await s.oid(),type:await s.type()};return r?{mode:await r.mode(),path:o,oid:await r.oid(),type:await r.type()}:void 0;case"true-true":if(r&&s&&await r.type()==="tree"&&await s.type()==="tree")return{mode:await r.mode(),path:o,oid:await r.oid(),type:"tree"};if(r&&s&&await r.type()==="blob"&&await s.type()==="blob")return rq({fs:t,gitdir:i,path:o,ours:r,base:n,theirs:s,ourName:l,baseName:c,theirName:d,mergeDriver:w}).then(async t=>{if(t.cleanMerge)h||a.insert({filepath:e,oid:t.mergeResult.oid,stage:0});else if(y.push(e),b.push(e),!h){let t="";n&&await n.type()==="blob"&&(t=await n.oid());let i=await r.oid(),o=await s.oid();a.delete({filepath:e}),t&&a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:i,stage:2}),a.insert({filepath:e,oid:o,stage:3})}return t.mergeResult});if(n&&!r&&s&&await n.type()==="blob"&&await s.type()==="blob"){if(y.push(e),$.push(e),!h){let t=await n.oid(),r=await s.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:r,stage:3})}return{mode:await s.mode(),oid:await s.oid(),type:"blob",path:o}}if(n&&r&&!s&&await n.type()==="blob"&&await r.type()==="blob"){if(y.push(e),x.push(e),!h){let t=await n.oid(),i=await r.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:i,stage:2})}return{mode:await r.mode(),oid:await r.oid(),type:"blob",path:o}}if(n&&!r&&!s&&(await n.type()==="blob"||await n.type()==="tree"))return;throw new tZ}},reduce:0!==y.length&&(!r||h)?void 0:async(e,r)=>{let a=r.filter(Boolean);if(e&&(!e||"tree"!==e.type||0!==a.length||"."===e.path)){if(a.length>0||"."===e.path&&0===a.length){let r=new tb(a).toObject();e.oid=await eR({fs:t,gitdir:i,type:"tree",object:r,dryRun:u})}return e}}});return 0!==y.length?(r&&!h&&await eh({fs:t,cache:e,dir:r,gitdir:i,trees:[el({ref:v.oid})],map:async function(e,[i]){let a=`${r}/${e}`;if(await i.type()==="blob"){let e=await i.mode(),r=new TextDecoder().decode(await i.content());await t.write(a,r,{mode:e})}return!0}}),new tY(y,b,$,x)):v.oid}async function rq({fs:t,gitdir:e,path:r,ours:i,base:a,theirs:s,ourName:o,theirName:l,baseName:c,dryRun:f,mergeDriver:d=rG}){let u="blob",h="100755",w="",m="";a&&await a.type()==="blob"&&(h=await a.mode(),w=await a.oid(),m=n.from(await a.content()).toString("utf8"));let p=h===await i.mode()?await s.mode():await i.mode();if(await i.oid()===await s.oid())return{cleanMerge:!0,mergeResult:{mode:p,path:r,oid:await i.oid(),type:u}};if(await i.oid()===w)return{cleanMerge:!0,mergeResult:{mode:p,path:r,oid:await s.oid(),type:u}};if(await s.oid()===w)return{cleanMerge:!0,mergeResult:{mode:p,path:r,oid:await i.oid(),type:u}};let g=n.from(await i.content()).toString("utf8"),y=n.from(await s.content()).toString("utf8"),{mergedText:b,cleanMerge:$}=await d({branches:[c,o,l],contents:[m,g,y],path:r});return{cleanMerge:$,mergeResult:{mode:p,path:r,oid:await eR({fs:t,gitdir:e,type:"blob",object:n.from(b,"utf8"),dryRun:f}),type:u}}}async function rL({fs:t,cache:e,dir:r,gitdir:i,ours:a,theirs:n,fastForward:s=!0,fastForwardOnly:o=!1,dryRun:l=!1,noUpdateBranch:c=!1,abortOnConflict:f=!0,message:d,author:u,committer:h,signingKey:w,onSign:m,mergeDriver:p,allowUnrelatedHistories:g=!1}){void 0===a&&(a=await e9({fs:t,gitdir:i,fullname:!0})),a=await tw.expand({fs:t,gitdir:i,ref:a}),n=await tw.expand({fs:t,gitdir:i,ref:n});let y=await tw.resolve({fs:t,gitdir:i,ref:a}),b=await tw.resolve({fs:t,gitdir:i,ref:n}),$=await rW({fs:t,cache:e,gitdir:i,oids:[y,b]});if(1!==$.length)if(0===$.length&&g)$.push("4b825dc642cb6eb9a060e54bf8d69288fbee4904");else throw new tZ;let x=$[0];if(x===b)return{oid:y,alreadyMerged:!0};if(s&&x===y)return l||c||await tw.writeRef({fs:t,gitdir:i,ref:a,value:b}),{oid:b,fastForward:!0};{if(o)throw new tG;let s=await B.acquire({fs:t,gitdir:i,cache:e,allowUnmerged:!1},async s=>rF({fs:t,cache:e,dir:r,gitdir:i,index:s,ourOid:y,theirOid:b,baseOid:x,ourName:e6(a),baseName:"base",theirName:e6(n),dryRun:l,abortOnConflict:f,mergeDriver:p}));if(s instanceof tY)throw s;return d||(d=`Merge branch '${e6(n)}' into ${e6(a)}`),{oid:await eM({fs:t,cache:e,gitdir:i,message:d,ref:a,tree:s,parent:[y,b],author:u,committer:h,signingKey:w,onSign:m,dryRun:l,noUpdateBranch:c}),tree:s,mergeCommit:!0}}}async function rV({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,dir:l,gitdir:c,ref:f,url:d,remote:u,remoteRef:h,prune:w,pruneTags:m,fastForward:p,fastForwardOnly:g,corsProxy:y,singleBranch:b,headers:$,author:x,committer:v,signingKey:_}){try{if(!f){let e=await e9({fs:t,gitdir:c});if(!e)throw new tX("ref");f=e}let{fetchHead:j,fetchHeadDescription:E}=await r_({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:c,corsProxy:y,ref:f,url:d,remote:u,remoteRef:h,singleBranch:b,headers:$,prune:w,pruneTags:m});await rL({fs:t,cache:e,gitdir:c,ours:f,theirs:j,fastForward:p,fastForwardOnly:g,message:`Merge ${E}`,author:x,committer:v,signingKey:_,dryRun:!1,noUpdateBranch:!1}),await eQ({fs:t,cache:e,onProgress:i,dir:l,gitdir:c,ref:f,remote:u,noCheckout:!1})}catch(t){throw t.caller="git.pull",t}}async function rK({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=f.join(o,".git"),ref:c,url:d,remote:u,remoteRef:h,corsProxy:w,singleBranch:m,headers:p={},cache:g={}}){try{e$("fs",t),e$("http",e),e$("gitdir",l);let f={name:"",email:"",timestamp:Date.now(),timezoneOffset:0};return await rV({fs:new eb(t),cache:g,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l,ref:c,url:d,remote:u,remoteRef:h,fastForwardOnly:!0,corsProxy:w,singleBranch:m,headers:p,author:f,committer:f})}catch(t){throw t.caller="git.fastForward",t}}async function rZ({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=f.join(o,".git"),ref:c,remote:d,remoteRef:u,url:h,corsProxy:w,depth:m=null,since:p=null,exclude:g=[],relative:y=!1,tags:b=!1,singleBranch:$=!1,headers:x={},prune:v=!1,pruneTags:_=!1,cache:j={}}){try{return e$("fs",t),e$("http",e),e$("gitdir",l),await r_({fs:new eb(t),cache:j,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,gitdir:l,ref:c,remote:d,remoteRef:u,url:h,corsProxy:w,depth:m,since:p,exclude:g,relative:y,tags:b,singleBranch:$,headers:x,prune:v,pruneTags:_})}catch(t){throw t.caller="git.fetch",t}}async function rY({fs:t,dir:e,gitdir:r=f.join(e,".git"),oids:i,cache:a={}}){try{return e$("fs",t),e$("gitdir",r),e$("oids",i),await rW({fs:new eb(t),cache:a,gitdir:r,oids:i})}catch(t){throw t.caller="git.findMergeBase",t}}async function rJ({fs:t,filepath:e}){if(await t.exists(f.join(e,".git")))return e;{let r=T(e);if(r===e)throw new F(`git root for ${e}`);return rJ({fs:t,filepath:r})}}async function rX({fs:t,filepath:e}){try{return e$("fs",t),e$("filepath",e),await rJ({fs:new eb(t),filepath:e})}catch(t){throw t.caller="git.findRoot",t}}async function rQ({fs:t,dir:e,gitdir:r=f.join(e,".git"),path:i}){try{return e$("fs",t),e$("gitdir",r),e$("path",i),await eA({fs:new eb(t),gitdir:r,path:i})}catch(t){throw t.caller="git.getConfig",t}}async function r0({fs:t,gitdir:e,path:r}){return(await tf.get({fs:t,gitdir:e})).getall(r)}async function r1({fs:t,dir:e,gitdir:r=f.join(e,".git"),path:i}){try{return e$("fs",t),e$("gitdir",r),e$("path",i),await r0({fs:new eb(t),gitdir:r,path:i})}catch(t){throw t.caller="git.getConfigAll",t}}async function r2({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1}){try{e$("http",t),e$("url",n);let l=rd.getRemoteHelperFor({url:n}),c=await l.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:1}),f={capabilities:[...c.capabilities]};for(let[t,e]of c.refs){let r=t.split("/"),i=r.pop(),a=f;for(let t of r)a[t]=a[t]||{},a=a[t];a[i]=e}for(let[t,e]of c.symrefs){let r=t.split("/"),i=r.pop(),a=f;for(let t of r)a[t]=a[t]||{},a=a[t];a[i]=e}return f}catch(t){throw t.caller="git.getRemoteInfo",t}}function r8(t,e,r,i){let a=[];for(let[n,s]of t.refs){if(e&&!n.startsWith(e))continue;if(n.endsWith("^{}")){if(i){let t=n.replace("^{}",""),e=a[a.length-1],r=e.ref===t?e:a.find(e=>e.ref===t);if(void 0===r)throw Error("I did not expect this to happen");r.peeled=s}continue}let o={ref:n,oid:s};r&&t.symrefs.has(n)&&(o.target=t.symrefs.get(n)),a.push(o)}return a}async function r4({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1,protocolVersion:l=2}){try{e$("http",t),e$("url",n);let c=rd.getRemoteHelperFor({url:n}),f=await c.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:l});if(2===f.protocolVersion)return{protocolVersion:f.protocolVersion,capabilities:f.capabilities2};let d={};for(let t of f.capabilities){let[e,r]=t.split("=");r?d[e]=r:d[e]=!0}return{protocolVersion:1,capabilities:d,refs:r8(f,void 0,!0,!0)}}catch(t){throw t.caller="git.getRemoteInfo2",t}}async function r3({type:t,object:e,format:r="content",oid:i}){return"deflated"!==r&&("wrapped"!==r&&(e=t$.wrap({type:t,object:e})),i=await R(e)),{oid:i,object:e}}async function r6({object:t}){try{e$("object",t),t="string"==typeof t?n.from(t,"utf8"):n.from(t);let{oid:e,object:r}=await r3({type:"blob",format:"content",object:t});return{oid:e,type:"blob",object:new Uint8Array(r),format:"wrapped"}}catch(t){throw t.caller="git.hashBlob",t}}async function r9({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,filepath:n}){try{n=f.join(i,n);let s=await t.read(n),o=await tA.fromPack({pack:s,getExternalRefDelta:r=>tB({fs:t,cache:e,gitdir:a,oid:r}),onProgress:r});return await t.write(n.replace(/\.pack$/,".idx"),await o.toBuffer()),{oids:[...o.hashes]}}catch(t){throw t.caller="git.indexPack",t}}async function r5({fs:t,onProgress:e,dir:r,gitdir:i=f.join(r,".git"),filepath:a,cache:n={}}){try{return e$("fs",t),e$("dir",r),e$("gitdir",r),e$("filepath",a),await r9({fs:new eb(t),cache:n,onProgress:e,dir:r,gitdir:i,filepath:a})}catch(t){throw t.caller="git.indexPack",t}}async function r7({fs:t,bare:e=!1,dir:r,gitdir:i=e?r:f.join(r,".git"),defaultBranch:a="master"}){try{return e$("fs",t),e$("gitdir",i),e||e$("dir",r),await rj({fs:new eb(t),bare:e,dir:r,gitdir:i,defaultBranch:a})}catch(t){throw t.caller="git.init",t}}async function it({fs:t,cache:e,gitdir:r,oid:i,ancestor:a,depth:n}){let s=await rh.read({fs:t,gitdir:r});if(!i)throw new tX("oid");if(!a)throw new tX("ancestor");if(i===a)return!1;let o=[i],l=new Set,c=0;for(;o.length;){if(c++===n)throw new tK(n);let i=o.shift(),{type:f,object:d}=await tB({fs:t,cache:e,gitdir:r,oid:i});if("commit"!==f)throw new q(i,f,"commit");let u=en.from(d).parse();for(let t of u.parent)if(t===a)return!0;if(!s.has(i))for(let t of u.parent)l.has(t)||(o.push(t),l.add(t))}return!1}async function ie({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,ancestor:a,depth:n=-1,cache:s={}}){try{return e$("fs",t),e$("gitdir",r),e$("oid",i),e$("ancestor",a),await it({fs:new eb(t),cache:s,gitdir:r,oid:i,ancestor:a,depth:n})}catch(t){throw t.caller="git.isDescendent",t}}async function ir({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i}){try{return e$("fs",t),e$("dir",e),e$("gitdir",r),e$("filepath",i),e_.isIgnored({fs:new eb(t),dir:e,gitdir:r,filepath:i})}catch(t){throw t.caller="git.isIgnored",t}}async function ii({fs:t,dir:e,gitdir:r=f.join(e,".git"),remote:i}){try{return e$("fs",t),e$("gitdir",r),tw.listBranches({fs:new eb(t),gitdir:r,remote:i})}catch(t){throw t.caller="git.listBranches",t}}async function ia({fs:t,gitdir:e,ref:r,cache:i}){if(!r)return B.acquire({fs:t,gitdir:e,cache:i},async function(t){return t.entries.map(t=>t.path)});{let a=await tw.resolve({gitdir:e,fs:t,ref:r}),n=[];return await is({fs:t,cache:i,gitdir:e,oid:a,filenames:n,prefix:""}),n}}async function is({fs:t,cache:e,gitdir:r,oid:i,filenames:a,prefix:n}){let{tree:s}=await ez({fs:t,cache:e,gitdir:r,oid:i});for(let i of s)"tree"===i.type?await is({fs:t,cache:e,gitdir:r,oid:i.oid,filenames:a,prefix:f.join(n,i.path)}):a.push(f.join(n,i.path))}async function io({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i,cache:a={}}){try{return e$("fs",t),e$("gitdir",r),await ia({fs:new eb(t),cache:a,gitdir:r,ref:i})}catch(t){throw t.caller="git.listFiles",t}}async function il({fs:t,cache:e,gitdir:r,ref:i}){let a;try{a=await tw.resolve({gitdir:r,fs:t,ref:i})}catch(t){if(t instanceof F)return[]}return(await ez({fs:t,cache:e,gitdir:r,oid:a})).tree.map(t=>({target:t.path,note:t.oid}))}async function ic({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i="refs/notes/commits",cache:a={}}){try{return e$("fs",t),e$("gitdir",r),e$("ref",i),await il({fs:new eb(t),cache:a,gitdir:r,ref:i})}catch(t){throw t.caller="git.listNotes",t}}async function id({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i}){try{return e$("fs",t),e$("gitdir",r),tw.listRefs({fs:new eb(t),gitdir:r,filepath:i})}catch(t){throw t.caller="git.listRefs",t}}async function iu({fs:t,gitdir:e}){let r=await tf.get({fs:t,gitdir:e});return Promise.all((await r.getSubsections("remote")).map(async t=>{let e=await r.get(`remote.${t}.url`);return{remote:t,url:e}}))}async function ih({fs:t,dir:e,gitdir:r=f.join(e,".git")}){try{return e$("fs",t),e$("gitdir",r),await iu({fs:new eb(t),gitdir:r})}catch(t){throw t.caller="git.listRemotes",t}}async function iw(t){let e,r=ri.streamReader(t),i=[];for(;!0!==(e=await r());){if(null===e)continue;let[t,r,...a]=(e=e.toString("utf8").replace(/\n$/,"")).split(" "),n={ref:r,oid:t};for(let t of a){let[e,r]=t.split(":");"symref-target"===e?n.target=r:"peeled"===e&&(n.peeled=r)}i.push(n)}return i}async function im({prefix:t,symrefs:e,peelTags:r}){let i=[];return i.push(ri.encode("command=ls-refs\n")),i.push(ri.encode(`agent=${ry.agent}
`)),(r||e||t)&&i.push(ri.delim()),r&&i.push(ri.encode("peel")),e&&i.push(ri.encode("symrefs")),t&&i.push(ri.encode(`ref-prefix ${t}`)),i.push(ri.flush()),i}async function ip({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1,protocolVersion:l=2,prefix:c,symrefs:f,peelTags:d}){try{e$("http",t),e$("url",n);let u=await rf.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:l});if(1===u.protocolVersion)return r8(u,c,f,d);let h=await im({prefix:c,symrefs:f,peelTags:d}),w=await rf.connect({http:t,auth:u.auth,headers:s,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,body:h});return iw(w.body)}catch(t){throw t.caller="git.listServerRefs",t}}async function ig({fs:t,dir:e,gitdir:r=f.join(e,".git")}){try{return e$("fs",t),e$("gitdir",r),tw.listTags({fs:new eb(t),gitdir:r})}catch(t){throw t.caller="git.listTags",t}}async function iy({fs:t,cache:e,gitdir:r,oid:i,fileId:a}){let n;if("e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"===a)return;let s=await es({fs:t,cache:e,gitdir:r,oid:i}),o=s.tree;return a===s.oid?n=s.path:Array.isArray(n=await ib({fs:t,cache:e,gitdir:r,tree:o,fileId:a,oid:i}))&&(0===n.length?n=void 0:1===n.length&&(n=n[0])),n}async function ib({fs:t,cache:e,gitdir:r,tree:i,fileId:a,oid:n,filepaths:s=[],parentPath:o=""}){let l=i.entries().map(function(i){let l;return i.oid===a?(l=f.join(o,i.path),s.push(l)):"tree"===i.type&&(l=tB({fs:t,cache:e,gitdir:r,oid:i.oid}).then(function({object:l}){return ib({fs:t,cache:e,gitdir:r,tree:tb.from(l),fileId:a,oid:n,filepaths:s,parentPath:f.join(o,i.path)})})),l});return await Promise.all(l),s}async function i$({fs:t,cache:e,gitdir:r,filepath:i,ref:a,depth:n,since:s,force:o,follow:l}){let c,f,d,u=void 0===s?void 0:Math.floor(s.valueOf()/1e3),h=[],w=await rh.read({fs:t,gitdir:r}),m=await tw.resolve({fs:t,gitdir:r,ref:a}),p=[await eB({fs:t,cache:e,gitdir:r,oid:m})];function g(t){d&&i&&h.push(t)}for(;p.length>0;){let a=p.pop();if(void 0!==u&&a.commit.committer.timestamp<=u)break;if(i){let n;try{n=await eH({fs:t,cache:e,gitdir:r,oid:a.commit.tree,filepath:i}),f&&c!==n&&h.push(f),c=n,f=a,d=!0}catch(n){if(n instanceof F){let s=l&&c;if(s&&(s=await iy({fs:t,cache:e,gitdir:r,oid:a.commit.tree,fileId:c})))if(Array.isArray(s)){if(f){let a=await iy({fs:t,cache:e,gitdir:r,oid:f.commit.tree,fileId:c});if(Array.isArray(a))if(1===(s=s.filter(t=>-1===a.indexOf(t))).length)i=s=s[0],f&&h.push(f);else{s=!1,f&&h.push(f);break}}}else i=s,f&&h.push(f);if(!s){if(d&&c&&(h.push(f),!o))break;if(!o&&!l)throw n}f=a,d=!1}else throw n}}else h.push(a);if(void 0!==n&&h.length===n){g(a);break}if(!w.has(a.oid))for(let i of a.commit.parent){let a=await eB({fs:t,cache:e,gitdir:r,oid:i});p.map(t=>t.oid).includes(a.oid)||p.push(a)}0===p.length&&g(a),p.sort((t,e)=>{var r,i;return r=t.commit,i=e.commit,r.committer.timestamp-i.committer.timestamp})}return h}async function ix({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i,ref:a="HEAD",depth:n,since:s,force:o,follow:l,cache:c={}}){try{return e$("fs",t),e$("gitdir",r),e$("ref",a),await i$({fs:new eb(t),cache:c,gitdir:r,filepath:i,ref:a,depth:n,since:s,force:o,follow:l})}catch(t){throw t.caller="git.log",t}}async function iv({fs:t,onSign:e,dir:r,gitdir:i=f.join(r,".git"),ours:a,theirs:n,fastForward:s=!0,fastForwardOnly:o=!1,dryRun:l=!1,noUpdateBranch:c=!1,abortOnConflict:d=!0,message:u,author:h,committer:w,signingKey:m,cache:p={},mergeDriver:g,allowUnrelatedHistories:y=!1}){try{e$("fs",t),m&&e$("onSign",e);let f=new eb(t),b=await eU({fs:f,gitdir:i,author:h});if(!b&&(!o||!s))throw new tJ("author");let $=await eD({fs:f,gitdir:i,author:b,committer:w});if(!$&&(!o||!s))throw new tJ("committer");return await rL({fs:f,cache:p,dir:r,gitdir:i,ours:a,theirs:n,fastForward:s,fastForwardOnly:o,dryRun:l,noUpdateBranch:c,abortOnConflict:d,message:u,author:b,committer:$,signingKey:m,onSign:e,mergeDriver:g,allowUnrelatedHistories:y})}catch(t){throw t.caller="git.merge",t}}let i_={commit:16,tree:32,blob:48,tag:64,ofs_delta:96,ref_delta:112};async function ij({fs:t,cache:e,dir:r,gitdir:i=f.join(r,".git"),oids:a}){let s=new c,o=[];function l(t,e){let r=n.from(t,e);o.push(r),s.update(r)}async function d({stype:t,object:e}){let r=i_[t],i=e.length,a=128*(i>15),s=15&i;i>>>=4;let o=(a|r|s).toString(16);for(l(o,"hex");a;)l(rr(2,o=(a=128*(i>127))|127&i),"hex"),i>>>=7;l(n.from(await eS(e)))}for(let r of(l("PACK"),l("00000002","hex"),l(rr(8,a.length),"hex"),a)){let{type:a,object:n}=await tB({fs:t,cache:e,gitdir:i,oid:r});await d({write:l,object:n,stype:a})}let u=s.digest();return o.push(u),o}async function iE({fs:t,cache:e,gitdir:r,oids:i,write:a}){let s=await ij({fs:t,cache:e,gitdir:r,oids:i}),o=n.from(await rt(s)),l=o.slice(-20).toString("hex"),c=`pack-${l}.pack`;return a?(await t.write(f.join(r,`objects/pack/${c}`),o),{filename:c}):{filename:c,packfile:new Uint8Array(o)}}async function iS({fs:t,dir:e,gitdir:r=f.join(e,".git"),oids:i,write:a=!1,cache:n={}}){try{return e$("fs",t),e$("gitdir",r),e$("oids",i),await iE({fs:new eb(t),cache:n,gitdir:r,oids:i,write:a})}catch(t){throw t.caller="git.packObjects",t}}async function ik({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=f.join(o,".git"),ref:c,url:d,remote:u,remoteRef:h,prune:w=!1,pruneTags:m=!1,fastForward:p=!0,fastForwardOnly:g=!1,corsProxy:y,singleBranch:b,headers:$={},author:x,committer:v,signingKey:_,cache:j={}}){try{e$("fs",t),e$("gitdir",l);let f=new eb(t),E=await eU({fs:f,gitdir:l,author:x});if(!E)throw new tJ("author");let S=await eD({fs:f,gitdir:l,author:E,committer:v});if(!S)throw new tJ("committer");return await rV({fs:f,cache:j,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l,ref:c,url:d,remote:u,remoteRef:h,fastForward:p,fastForwardOnly:g,corsProxy:y,singleBranch:b,headers:$,author:E,committer:S,signingKey:_,prune:w,pruneTags:m})}catch(t){throw t.caller="git.pull",t}}async function iR({fs:t,cache:e,dir:r,gitdir:i=f.join(r,".git"),start:a,finish:n}){let s=await rh.read({fs:t,gitdir:i}),o=new Set,l=new Set;for(let e of a)o.add(await tw.resolve({fs:t,gitdir:i,ref:e}));for(let e of n)try{let r=await tw.resolve({fs:t,gitdir:i,ref:e});l.add(r)}catch(t){}let c=new Set;async function d(r){c.add(r);let{type:a,object:n}=await tB({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a)return d(ei.from(n).headers().object);if("commit"!==a)throw new q(r,a,"commit");if(!s.has(r))for(r of en.from(n).headers().parent)l.has(r)||c.has(r)||await d(r)}for(let t of o)await d(t);return c}async function iI({fs:t,cache:e,dir:r,gitdir:i=f.join(r,".git"),oids:a}){let n=new Set;async function s(r){if(n.has(r))return;n.add(r);let{type:a,object:o}=await tB({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a){let t=ei.from(o).headers().object;await s(t)}else if("commit"===a){let t=en.from(o).headers().tree;await s(t)}else if("tree"===a)for(let t of tb.from(o))"blob"===t.type&&n.add(t.oid),"tree"===t.type&&await s(t.oid)}for(let t of a)await s(t);return n}async function iP(t){let e={},r="",i=ri.streamReader(t),a=await i();for(;!0!==a;)null!==a&&(r+=a.toString("utf8")+"\n"),a=await i();let n=r.toString("utf8").split("\n");if(!(a=n.shift()).startsWith("unpack "))throw new t0('unpack ok" or "unpack [error message]',a);for(let t of(e.ok="unpack ok"===a,e.ok||(e.error=a.slice(7)),e.refs={},n)){if(""===t.trim())continue;let r=t.slice(0,2),i=t.slice(3),a=i.indexOf(" ");-1===a&&(a=i.length);let n=i.slice(0,a),s=i.slice(a+1);e.refs[n]={ok:"ok"===r,error:s}}return e}async function iO({capabilities:t=[],triplets:e=[]}){let r=[],i=`\0 ${t.join(" ")}`;for(let t of e)r.push(ri.encode(`${t.oldoid} ${t.oid} ${t.fullRef}${i}
`)),i="";return r.push(ri.flush()),r}async function iA({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,onPrePush:l,gitdir:c,ref:f,remoteRef:d,remote:u,url:h,force:w=!1,delete:m=!1,corsProxy:p,headers:g={}}){let y,b=f||await e9({fs:t,gitdir:c});if(void 0===b)throw new tX("ref");let $=await tf.get({fs:t,gitdir:c});u=u||await $.get(`branch.${b}.pushRemote`)||await $.get("remote.pushDefault")||await $.get(`branch.${b}.remote`)||"origin";let x=h||await $.get(`remote.${u}.pushurl`)||await $.get(`remote.${u}.url`);if(void 0===x)throw new tX("remote OR url");let v=d||await $.get(`branch.${b}.merge`);if(void 0===x)throw new tX("remoteRef");void 0===p&&(p=await $.get("http.corsProxy"));let _=await tw.expand({fs:t,gitdir:c,ref:b}),j=m?"0000000000000000000000000000000000000000":await tw.resolve({fs:t,gitdir:c,ref:_}),E=rd.getRemoteHelperFor({url:x}),S=await E.discover({http:r,onAuth:n,onAuthSuccess:s,onAuthFailure:o,corsProxy:p,service:"git-receive-pack",url:x,headers:g,protocolVersion:1}),k=S.auth;if(v)try{y=await tw.expandAgainstMap({ref:v,map:S.refs})}catch(t){if(t instanceof F)y=v.startsWith("refs/")?v:`refs/heads/${v}`;else throw t}else y=_;let R=S.refs.get(y)||"0000000000000000000000000000000000000000";if(l&&!await l({remote:u,url:x,localRef:{ref:m?"(delete)":_,oid:j},remoteRef:{ref:y,oid:R}}))throw new t6;let I=!S.capabilities.has("no-thin"),P=new Set;if(!m){let r=[...S.refs.values()],i=new Set;if("0000000000000000000000000000000000000000"!==R){let a=await rW({fs:t,cache:e,gitdir:c,oids:[j,R]});for(let t of a)r.push(t);I&&(i=await iI({fs:t,cache:e,gitdir:c,oids:a}))}if(!r.includes(j)){let i=await iR({fs:t,cache:e,gitdir:c,start:[j],finish:r});P=await iI({fs:t,cache:e,gitdir:c,oids:i})}if(I){try{let r=await tw.resolve({fs:t,gitdir:c,ref:`refs/remotes/${u}/HEAD`,depth:2}),{oid:a}=await tw.resolveAgainstMap({ref:r.replace(`refs/remotes/${u}/`,""),fullref:r,map:S.refs});for(let r of(await iI({fs:t,cache:e,gitdir:c,oids:[a]})))i.add(r)}catch(t){}for(let t of i)P.delete(t)}if(j===R&&(w=!0),!w){if(_.startsWith("refs/tags")&&"0000000000000000000000000000000000000000"!==R)throw new t1("tag-exists");if("0000000000000000000000000000000000000000"!==j&&"0000000000000000000000000000000000000000"!==R&&!await it({fs:t,cache:e,gitdir:c,oid:j,ancestor:R,depth:-1}))throw new t1("not-fast-forward")}}let O=rg([...S.capabilities],["report-status","side-band-64k",`agent=${ry.agent}`]),A=await iO({capabilities:O,triplets:[{oldoid:R,oid:j,fullRef:y}]}),C=m?[]:await ij({fs:t,cache:e,gitdir:c,oids:[...P]}),U=await E.connect({http:r,onProgress:i,corsProxy:p,service:"git-receive-pack",url:x,auth:k,headers:g,body:[...A,...C]}),{packfile:D,progress:N}=await rx.demux(U.body);a&&e7(r$(N),async t=>{await a(t)});let B=await iP(D);if(U.headers&&(B.headers=U.headers),u&&B.ok&&B.refs[y].ok&&!_.startsWith("refs/tags")){let e=`refs/remotes/${u}/${y.replace("refs/heads","")}`;m?await tw.deleteRef({fs:t,gitdir:c,ref:e}):await tw.writeRef({fs:t,gitdir:c,ref:e,value:j})}if(B.ok&&Object.values(B.refs).every(t=>t.ok))return B;throw new tF(Object.entries(B.refs).filter(([t,e])=>!e.ok).map(([t,e])=>`
  - ${t}: ${e.error}`).join(""),B)}async function iC({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,onPrePush:o,dir:l,gitdir:c=f.join(l,".git"),ref:d,remoteRef:u,remote:h="origin",url:w,force:m=!1,delete:p=!1,corsProxy:g,headers:y={},cache:b={}}){try{return e$("fs",t),e$("http",e),e$("gitdir",c),await iA({fs:new eb(t),cache:b,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,onPrePush:o,gitdir:c,ref:d,remoteRef:u,remote:h,url:w,force:m,delete:p,corsProxy:g,headers:y})}catch(t){throw t.caller="git.push",t}}async function iU({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tB({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return iU({fs:t,cache:e,gitdir:r,oid:i=ei.from(n).parse().object});if("blob"!==a)throw new q(i,a,"blob");return{oid:i,blob:new Uint8Array(n)}}async function iD({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){return void 0!==a&&(i=await eH({fs:t,cache:e,gitdir:r,oid:i,filepath:a})),await iU({fs:t,cache:e,gitdir:r,oid:i})}async function iN({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,filepath:a,cache:n={}}){try{return e$("fs",t),e$("gitdir",r),e$("oid",i),await iD({fs:new eb(t),cache:n,gitdir:r,oid:i,filepath:a})}catch(t){throw t.caller="git.readBlob",t}}async function iB({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,cache:a={}}){try{return e$("fs",t),e$("gitdir",r),e$("oid",i),await eB({fs:new eb(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.readCommit",t}}async function iM({fs:t,cache:e,gitdir:r,ref:i="refs/notes/commits",oid:a}){let n=await tw.resolve({gitdir:r,fs:t,ref:i}),{blob:s}=await iD({fs:t,cache:e,gitdir:r,oid:n,filepath:a});return s}async function iT({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i="refs/notes/commits",oid:a,cache:n={}}){try{return e$("fs",t),e$("gitdir",r),e$("ref",i),e$("oid",a),await iM({fs:new eb(t),cache:n,gitdir:r,ref:i,oid:a})}catch(t){throw t.caller="git.readNote",t}}async function iH({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,format:a="parsed",filepath:n,encoding:s,cache:o={}}){try{e$("fs",t),e$("gitdir",r),e$("oid",i);let e=new eb(t);void 0!==n&&(i=await eH({fs:e,cache:o,gitdir:r,oid:i,filepath:n}));let l=await tB({fs:e,cache:o,gitdir:r,oid:i,format:"parsed"===a?"content":a});if(l.oid=i,"parsed"===a)switch(l.format="parsed",l.type){case"commit":l.object=en.from(l.object).parse();break;case"tree":l.object=tb.from(l.object).entries();break;case"blob":s?l.object=l.object.toString(s):(l.object=new Uint8Array(l.object),l.format="content");break;case"tag":l.object=ei.from(l.object).parse();break;default:throw new q(l.oid,l.type,"blob|commit|tag|tree")}else("deflated"===l.format||"wrapped"===l.format)&&(l.type=l.format);return l}catch(t){throw t.caller="git.readObject",t}}async function iW({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tB({fs:t,cache:e,gitdir:r,oid:i,format:"content"});if("tag"!==a)throw new q(i,a,"tag");let s=ei.from(n);return{oid:i,tag:s.parse(),payload:s.payload()}}async function iz({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,cache:a={}}){try{return e$("fs",t),e$("gitdir",r),e$("oid",i),await iW({fs:new eb(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.readTag",t}}async function iG({fs:t,dir:e,gitdir:r=f.join(e,".git"),oid:i,filepath:a,cache:n={}}){try{return e$("fs",t),e$("gitdir",r),e$("oid",i),await ez({fs:new eb(t),cache:n,gitdir:r,oid:i,filepath:a})}catch(t){throw t.caller="git.readTree",t}}async function iF({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i,cache:a={}}){try{e$("fs",t),e$("gitdir",r),e$("filepath",i),await B.acquire({fs:new eb(t),gitdir:r,cache:a},async function(t){t.delete({filepath:i})})}catch(t){throw t.caller="git.remove",t}}async function iq({fs:t,cache:e,onSign:r,gitdir:i,ref:a="refs/notes/commits",oid:n,author:s,committer:o,signingKey:l}){let c;try{c=await tw.resolve({gitdir:i,fs:t,ref:a})}catch(t){if(!(t instanceof F))throw t}let f=(await ez({fs:t,gitdir:i,oid:c||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;f=f.filter(t=>t.path!==n);let d=await eG({fs:t,gitdir:i,tree:f});return await eM({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:d,parent:c&&[c],message:`Note removed by 'isomorphic-git removeNote'
`,author:s,committer:o,signingKey:l})}async function iL({fs:t,onSign:e,dir:r,gitdir:i=f.join(r,".git"),ref:a="refs/notes/commits",oid:n,author:s,committer:o,signingKey:l,cache:c={}}){try{e$("fs",t),e$("gitdir",i),e$("oid",n);let r=new eb(t),f=await eU({fs:r,gitdir:i,author:s});if(!f)throw new tJ("author");let d=await eD({fs:r,gitdir:i,author:f,committer:o});if(!d)throw new tJ("committer");return await iq({fs:r,cache:c,onSign:e,gitdir:i,ref:a,oid:n,author:f,committer:d,signingKey:l})}catch(t){throw t.caller="git.removeNote",t}}async function iV({fs:t,gitdir:e,oldref:r,ref:i,checkout:a=!1}){if(i!==m.clean(i))throw new tV(i,m.clean(i));if(r!==m.clean(r))throw new tV(r,m.clean(r));let n=`refs/heads/${r}`,s=`refs/heads/${i}`;if(await tw.exists({fs:t,gitdir:e,ref:s}))throw new tM("branch",i,!1);let o=await tw.resolve({fs:t,gitdir:e,ref:n,depth:1});await tw.writeRef({fs:t,gitdir:e,ref:s,value:o}),await tw.deleteRef({fs:t,gitdir:e,ref:n});let l=await e9({fs:t,gitdir:e,fullname:!0})===n;(a||l)&&await tw.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:s})}async function iK({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i,oldref:a,checkout:n=!1}){try{return e$("fs",t),e$("gitdir",r),e$("ref",i),e$("oldref",a),await iV({fs:new eb(t),gitdir:r,ref:i,oldref:a,checkout:n})}catch(t){throw t.caller="git.renameBranch",t}}async function iZ({gitdir:t,type:e,object:r}){return R(t$.wrap({type:e,object:r}))}async function iY({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i,ref:a,cache:n={}}){try{let s,o;e$("fs",t),e$("gitdir",r),e$("filepath",i);let l=new eb(t);try{s=await tw.resolve({fs:l,gitdir:r,ref:a||"HEAD"})}catch(t){if(a)throw t}if(s)try{s=await eH({fs:l,cache:n,gitdir:r,oid:s,filepath:i})}catch(t){s=null}let c={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:0,uid:0,gid:0,size:0},d=e&&await l.read(f.join(e,i));d&&(o=await iZ({gitdir:r,type:"blob",object:d}),s===o&&(c=await l.lstat(f.join(e,i)))),await B.acquire({fs:l,gitdir:r,cache:n},async function(t){t.delete({filepath:i}),s&&t.insert({filepath:i,stats:c,oid:s})})}catch(t){throw t.caller="git.reset",t}}async function iJ({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i,depth:a}){try{return e$("fs",t),e$("gitdir",r),e$("ref",i),await tw.resolve({fs:new eb(t),gitdir:r,ref:i,depth:a})}catch(t){throw t.caller="git.resolveRef",t}}async function iX({fs:t,dir:e,gitdir:r=f.join(e,".git"),path:i,value:a,append:n=!1}){try{e$("fs",t),e$("gitdir",r),e$("path",i);let e=new eb(t),s=await tf.get({fs:e,gitdir:r});n?await s.append(i,a):await s.set(i,a),await tf.save({fs:e,gitdir:r,config:s})}catch(t){throw t.caller="git.setConfig",t}}async function iQ({fs:t,gitdir:e,commit:r}){let i=en.from(r).toObject();return await eR({fs:t,gitdir:e,type:"commit",object:i,format:"content"})}class i0{static get timezoneOffsetForRefLogEntry(){let t=new Date().getTimezoneOffset(),e=Math.abs(Math.floor(t/60)),r=Math.abs(t%60).toString().padStart(2,"0");return`${t>0?"-":"+"}${e.toString().padStart(2,"0")}${r}`}static createStashReflogEntry(t,e,r){let i=t.name.replace(/\s/g,""),a=Math.floor(Date.now()/1e3),n=i0.timezoneOffsetForRefLogEntry;return`0000000000000000000000000000000000000000 ${e} ${i} ${t.email} ${a} ${n}	${r}
`}static getStashReflogEntry(t,e=!1){return t.split("\n").filter(t=>t).reverse().map((t,r)=>e?`stash@{${r}}: ${t.split("	")[1]}`:t)}}let i1={stage:G,workdir:ef};async function i2(t,e){return void 0===a&&(a=new l),a.acquire(t,e)}async function i8(t,e,r,i,a=null){let n=f.join(r,i),s=await t.lstat(n);if(!s)throw new F(n);if(s.isDirectory())throw new b(`${n}: file expected, but found directory`);let o=a?await tx({fs:t,gitdir:e,oid:a}):void 0,l=o?a:void 0;return o||await i2({fs:t,gitdir:e,currentFilepath:n},async()=>{let r=s.isSymbolicLink()?await t.readlink(n).then(eI):await t.read(n);if(null===r)throw new F(n);l=await eR({fs:t,gitdir:e,type:"blob",object:r})}),l}async function i4({fs:t,dir:e,gitdir:r,entries:i}){async function a(i){if("tree"===i.type){if(!i.oid){let e=await Promise.all(i.children.map(a));i.oid=await eG({fs:t,gitdir:r,tree:e}),i.mode=16384}}else"blob"===i.type&&(i.oid=await i8(t,r,e,i.path,i.oid),i.mode=33188);return i.path=i.path.split("/").pop(),i}return Promise.all(i.map(a))}async function i3({fs:t,dir:e,gitdir:r,treePair:i}){let a="stage"===i[1],n=i.map(t=>"string"==typeof t?i1[t]():t),s=[],o=async(i,[a,n])=>{if(!("."===i||await e_.isIgnored({fs:t,dir:e,gitdir:r,filepath:i}))&&n)return a&&(await a.oid()===await n.oid()||await n.oid()===void 0)||s.push([a,n]),{mode:await n.mode(),path:i,oid:await n.oid(),type:await n.type()}},l=async(t,e)=>(e=e.filter(Boolean),t)?(t.children=e,t):e.length>0?e:void 0,c=async(r,i)=>{let n=[];for(let r of i){let[i,o]=r;a?o&&(await t.exists(`${e}/${o.toString()}`)?n.push(r):s.push([null,o])):i&&(o?n.push(r):s.push([i,null]))}return n.length?Promise.all(n.map(r)):[]},f=await eh({fs:t,cache:{},dir:e,gitdir:r,trees:n,map:o,reduce:l,iterate:c});if(0===s.length||0===f.length)return null;let d=(await i4({fs:t,dir:e,gitdir:r,entries:f})).filter(Boolean).map(t=>({mode:t.mode,path:t.path,oid:t.oid,type:t.type}));return eG({fs:t,gitdir:r,tree:d})}async function i6({fs:t,dir:e,gitdir:r,stashCommit:i,parentCommit:a,wasStaged:n}){let s=[],o=[],l=await eh({fs:t,cache:{},dir:e,gitdir:r,trees:[el({ref:a}),el({ref:i})],map:async(i,[a,l])=>{if("."===i||await e_.isIgnored({fs:t,dir:e,gitdir:r,filepath:i}))return;let c=l?await l.type():await a.type();if("tree"!==c&&"blob"!==c)return;if(!l&&a)return"tree"===c&&s.push(i),"blob"===c&&n&&o.push({filepath:i,oid:await a.oid()}),{method:"tree"===c?"rmdir":"rm",filepath:i};let d=await l.oid();if(!a||await a.oid()!==d)if("tree"===c)return{method:"mkdir",filepath:i};else return n&&o.push({filepath:i,oid:d,stats:await t.lstat(f.join(e,i))}),{method:"write",filepath:i,oid:d}}});await i2({fs:t,gitdir:r,dirRemoved:s,ops:l},async()=>{for(let i of l){let a=f.join(e,i.filepath);switch(i.method){case"rmdir":await t.rmdir(a);break;case"mkdir":await t.mkdir(a);break;case"rm":await t.rm(a);break;case"write":if(!s.some(t=>a.startsWith(t))){let{object:e}=await tB({fs:t,cache:{},gitdir:r,oid:i.oid});await t.exists(a)&&await t.rm(a),await t.write(a,e)}}}}),await B.acquire({fs:t,gitdir:r,cache:{}},async t=>{o.forEach(({filepath:e,stats:r,oid:i})=>{t.insert({filepath:e,stats:r,oid:i})})})}class i9{constructor({fs:t,dir:e,gitdir:r=f.join(e,".git")}){Object.assign(this,{fs:t,dir:e,gitdir:r,_author:null})}static get refStash(){return"refs/stash"}static get refLogsStash(){return"logs/refs/stash"}get refStashPath(){return f.join(this.gitdir,i9.refStash)}get refLogsStashPath(){return f.join(this.gitdir,i9.refLogsStash)}async getAuthor(){if(!this._author&&(this._author=await eU({fs:this.fs,gitdir:this.gitdir,author:{}}),!this._author))throw new tJ("author");return this._author}async getStashSHA(t,e){return await this.fs.exists(this.refStashPath)?(e||await this.readStashReflogs({parsed:!1}))[t].split(" ")[1]:null}async writeStashCommit({message:t,tree:e,parent:r}){return iQ({fs:this.fs,gitdir:this.gitdir,commit:{message:t,tree:e,parent:r,author:await this.getAuthor(),committer:await this.getAuthor()}})}async readStashCommit(t){let e=await this.readStashReflogs({parsed:!1});if(0!==t&&(t<0||t>e.length-1))throw new tV(`stash@${t}`,"number that is in range of [0, num of stash pushed]");let r=await this.getStashSHA(t,e);return r?eB({fs:this.fs,cache:{},gitdir:this.gitdir,oid:r}):{}}async writeStashRef(t){return tw.writeRef({fs:this.fs,gitdir:this.gitdir,ref:i9.refStash,value:t})}async writeStashReflogEntry({stashCommit:t,message:e}){let r=await this.getAuthor(),i=i0.createStashReflogEntry(r,t,e),a=this.refLogsStashPath;await i2({filepath:a,entry:i},async()=>{let t=await this.fs.exists(a)?await this.fs.read(a,"utf8"):"";await this.fs.write(a,t+i,"utf8")})}async readStashReflogs({parsed:t=!1}){if(!await this.fs.exists(this.refLogsStashPath))return[];let e=(await this.fs.read(this.refLogsStashPath)).toString();return i0.getStashReflogEntry(e,t)}}async function i5({fs:t,dir:e,gitdir:r,message:i=""}){let a=new i9({fs:t,dir:e,gitdir:r});await a.getAuthor();let n=await e9({fs:t,gitdir:r,fullname:!1}),s=await tw.resolve({fs:t,gitdir:r,ref:"HEAD"}),o=(await iB({fs:t,dir:e,gitdir:r,oid:s})).commit.message,l=[s],c=null,f=el({ref:"HEAD"}),d=await i3({fs:t,dir:e,gitdir:r,treePair:[el({ref:"HEAD"}),"stage"]});if(d){let t=await a.writeStashCommit({message:`stash-Index: WIP on ${n} - ${new Date().toISOString()}`,tree:d,parent:l});l.push(t),c=d,f=G()}let u=await i3({fs:t,dir:e,gitdir:r,treePair:[f,"workdir"]});if(u){let t=await a.writeStashCommit({message:`stash-WorkDir: WIP on ${n} - ${new Date().toISOString()}`,tree:u,parent:[l[l.length-1]]});l.push(t),c=u}if(!c||!d&&!u)throw new F("changes, nothing to stash");let h=(i.trim()||`WIP on ${n}`)+`: ${s.substring(0,7)} ${o}`,w=await a.writeStashCommit({message:h,tree:c,parent:l});return await a.writeStashRef(w),await a.writeStashReflogEntry({stashCommit:w,message:h}),await e4({fs:t,dir:e,gitdir:r,ref:n,track:!1,force:!0}),w}async function i7({fs:t,dir:e,gitdir:r,refIdx:i=0}){let a=new i9({fs:t,dir:e,gitdir:r}),n=await a.readStashCommit(i),{parent:s=null}=n.commit?n.commit:{};if(s&&Array.isArray(s))for(let i=0;i<s.length-1;i++){let a=(await eB({fs:t,cache:{},gitdir:r,oid:s[i+1]})).commit.message.startsWith("stash-Index");await i6({fs:t,dir:e,gitdir:r,stashCommit:s[i+1],parentCommit:s[i],wasStaged:a})}}async function at({fs:t,dir:e,gitdir:r,refIdx:i=0}){let a=new i9({fs:t,dir:e,gitdir:r});if(!(await a.readStashCommit(i)).commit)return;let n=a.refStashPath;await i2(n,async()=>{await t.exists(n)&&await t.rm(n)});let s=await a.readStashReflogs({parsed:!1});if(!s.length)return;s.splice(i,1);let o=a.refLogsStashPath;await i2({reflogEntries:s,stashReflogPath:o,stashMgr:a},async()=>{if(s.length){await t.write(o,s.join("\n"),"utf8");let e=s[s.length-1].split(" ")[1];await a.writeStashRef(e)}else await t.rm(o)})}async function ae({fs:t,dir:e,gitdir:r}){return new i9({fs:t,dir:e,gitdir:r}).readStashReflogs({parsed:!0})}async function ar({fs:t,dir:e,gitdir:r}){let i=new i9({fs:t,dir:e,gitdir:r}),a=[i.refStashPath,i.refLogsStashPath];await i2(a,async()=>{await Promise.all(a.map(async e=>{if(await t.exists(e))return t.rm(e)}))})}async function ai({fs:t,dir:e,gitdir:r,refIdx:i=0}){await i7({fs:t,dir:e,gitdir:r,refIdx:i}),await at({fs:t,dir:e,gitdir:r,refIdx:i})}async function aa({fs:t,dir:e,gitdir:r=f.join(e,".git"),op:i="push",message:a="",refIdx:n=0}){e$("fs",t),e$("dir",e),e$("gitdir",r),e$("op",i);try{let s=new eb(t);["refs","logs","logs/refs"].map(t=>f.join(r,t)).forEach(async t=>{await s.exists(t)||await s.mkdir(t)});let o={push:i5,apply:i7,drop:at,list:ae,clear:ar,pop:ai}[i];if(o){if(["apply","drop","pop"].includes(i)&&n<0)throw new tV(`stash@${n}`,"number that is in range of [0, num of stash pushed]");return await o({fs:s,dir:e,gitdir:r,message:a,refIdx:n})}throw Error(`To be implemented: ${i}`)}catch(t){throw t.caller="git.stash",t}}async function an({fs:t,dir:e,gitdir:r=f.join(e,".git"),filepath:i,cache:a={}}){try{e$("fs",t),e$("gitdir",r),e$("filepath",i);let n=new eb(t);if(await e_.isIgnored({fs:n,gitdir:r,dir:e,filepath:i}))return"ignored";let s=await ao({fs:n,cache:a,gitdir:r}),o=await as({fs:n,cache:a,gitdir:r,tree:s,path:i}),l=await B.acquire({fs:n,gitdir:r,cache:a},async function(t){for(let e of t)if(e.path===i)return e;return null}),c=await n.lstat(f.join(e,i)),d=null!==o,u=null!==l,h=null!==c,w=async()=>{if(u&&!A(l,c))return l.oid;{let t=await n.read(f.join(e,i)),s=await iZ({gitdir:r,type:"blob",object:t});return u&&l.oid===s&&-1!==c.size&&B.acquire({fs:n,gitdir:r,cache:a},async function(t){t.insert({filepath:i,stats:c,oid:s})}),s}};if(!d&&!h&&!u)return"absent";if(!d&&!h&&u)return"*absent";if(!d&&h&&!u)return"*added";if(!d&&h&&u)return await w()===l.oid?"added":"*added";if(d&&!h&&!u)return"deleted";if(d&&!h&&u)return l.oid,"*deleted";if(d&&h&&!u)return await w()===o?"*undeleted":"*undeletemodified";if(d&&h&&u){let t=await w();if(t===o)return t===l.oid?"unmodified":"*unmodified";return t===l.oid?"modified":"*modified"}}catch(t){throw t.caller="git.status",t}}async function as({fs:t,cache:e,gitdir:r,tree:i,path:a}){"string"==typeof a&&(a=a.split("/"));let n=a.shift();for(let s of i)if(s.path===n){if(0===a.length)return s.oid;let{type:i,object:n}=await tB({fs:t,cache:e,gitdir:r,oid:s.oid});if("tree"===i)return as({fs:t,cache:e,gitdir:r,tree:tb.from(n),path:a});if("blob"===i)throw new q(s.oid,i,"blob",a.join("/"))}return null}async function ao({fs:t,cache:e,gitdir:r}){let i;try{i=await tw.resolve({fs:t,gitdir:r,ref:"HEAD"})}catch(t){if(t instanceof F)return[]}let{tree:a}=await ez({fs:t,cache:e,gitdir:r,oid:i});return a}async function al({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i="HEAD",filepaths:a=["."],filter:n,cache:s={},ignored:o=!1}){try{e$("fs",t),e$("gitdir",r),e$("ref",i);let l=new eb(t);return await eh({fs:l,cache:s,dir:e,gitdir:r,trees:[el({ref:i}),ef(),G()],map:async function(t,[r,i,s]){let c;if(!r&&!s&&i&&!o&&await e_.isIgnored({fs:l,dir:e,filepath:t})||!a.some(e=>eX(t,e)))return null;if(n&&!n(t))return;let[f,d,u]=await Promise.all([r&&r.type(),i&&i.type(),s&&s.type()]),h=[f,d,u].includes("blob");if(("tree"===f||"special"===f)&&!h)return;if("commit"===f)return null;if(("tree"===d||"special"===d)&&!h)return;if("commit"===u)return null;if(("tree"===u||"special"===u)&&!h)return;let w="blob"===f?await r.oid():void 0,m="blob"===u?await s.oid():void 0;"blob"!==f&&"blob"===d&&"blob"!==u?c="42":"blob"===d&&(c=await i.oid());let p=[void 0,w,c,m],g=p.map(t=>p.indexOf(t));return g.shift(),[t,...g]}})}catch(t){throw t.caller="git.statusMatrix",t}}async function ac({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i,object:a,force:n=!1}){try{e$("fs",t),e$("gitdir",r),e$("ref",i);let e=new eb(t);if(void 0===i)throw new tX("ref");i=i.startsWith("refs/tags/")?i:`refs/tags/${i}`;let s=await tw.resolve({fs:e,gitdir:r,ref:a||"HEAD"});if(!n&&await tw.exists({fs:e,gitdir:r,ref:i}))throw new tM("tag",i);await tw.writeRef({fs:e,gitdir:r,ref:i,value:s})}catch(t){throw t.caller="git.tag",t}}async function af({fs:t,dir:e,gitdir:r=f.join(e,".git"),cache:i={},filepath:a,oid:n,mode:s,add:o,remove:l,force:c}){try{let d;e$("fs",t),e$("gitdir",r),e$("filepath",a);let u=new eb(t);if(l)return await B.acquire({fs:u,gitdir:r,cache:i},async function(t){if(!c){let t=await u.lstat(f.join(e,a));if(t){if(t.isDirectory())throw new tL("directory");return}}t.has({filepath:a})&&t.delete({filepath:a})});if(!n){if(!(d=await u.lstat(f.join(e,a))))throw new F(`file at "${a}" on disk and "remove" not set`);if(d.isDirectory())throw new tL("directory")}return await B.acquire({fs:u,gitdir:r,cache:i},async function(t){let i;if(!o&&!t.has({filepath:a}))throw new F(`file at "${a}" in index and "add" not set`);if(n)i={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:s,uid:0,gid:0,size:0};else{let t=(i=d).isSymbolicLink()?await u.readlink(f.join(e,a)):await u.read(f.join(e,a));n=await eR({fs:u,gitdir:r,type:"blob",format:"content",object:t})}return t.insert({filepath:a,oid:n,stats:i}),n})}catch(t){throw t.caller="git.updateIndex",t}}function ad(){try{return ry.version}catch(t){throw t.caller="git.version",t}}async function au({fs:t,dir:e,gitdir:r=f.join(e,".git"),trees:i,map:a,reduce:n,iterate:s,cache:o={}}){try{return e$("fs",t),e$("gitdir",r),e$("trees",i),await eh({fs:new eb(t),cache:o,dir:e,gitdir:r,trees:i,map:a,reduce:n,iterate:s})}catch(t){throw t.caller="git.walk",t}}async function ah({fs:t,dir:e,gitdir:r=f.join(e,".git"),blob:i}){try{return e$("fs",t),e$("gitdir",r),e$("blob",i),await eR({fs:new eb(t),gitdir:r,type:"blob",object:i,format:"content"})}catch(t){throw t.caller="git.writeBlob",t}}async function aw({fs:t,dir:e,gitdir:r=f.join(e,".git"),commit:i}){try{return e$("fs",t),e$("gitdir",r),e$("commit",i),await iQ({fs:new eb(t),gitdir:r,commit:i})}catch(t){throw t.caller="git.writeCommit",t}}async function am({fs:t,dir:e,gitdir:r=f.join(e,".git"),type:i,object:a,format:s="parsed",oid:o,encoding:l}){try{let e=new eb(t);if("parsed"===s){switch(i){case"commit":a=en.from(a).toObject();break;case"tree":a=tb.from(a).toObject();break;case"blob":a=n.from(a,l);break;case"tag":a=ei.from(a).toObject();break;default:throw new q(o||"",i,"blob|commit|tag|tree")}s="content"}return o=await eR({fs:e,gitdir:r,type:i,object:a,oid:o,format:s})}catch(t){throw t.caller="git.writeObject",t}}async function ap({fs:t,dir:e,gitdir:r=f.join(e,".git"),ref:i,value:a,force:n=!1,symbolic:s=!1}){try{e$("fs",t),e$("gitdir",r),e$("ref",i),e$("value",a);let e=new eb(t);if(i!==m.clean(i))throw new tV(i,m.clean(i));if(!n&&await tw.exists({fs:e,gitdir:r,ref:i}))throw new tM("ref",i);s?await tw.writeSymbolicRef({fs:e,gitdir:r,ref:i,value:a}):(a=await tw.resolve({fs:e,gitdir:r,ref:a}),await tw.writeRef({fs:e,gitdir:r,ref:i,value:a}))}catch(t){throw t.caller="git.writeRef",t}}async function ag({fs:t,gitdir:e,tag:r}){let i=ei.from(r).toObject();return await eR({fs:t,gitdir:e,type:"tag",object:i,format:"content"})}async function ay({fs:t,dir:e,gitdir:r=f.join(e,".git"),tag:i}){try{return e$("fs",t),e$("gitdir",r),e$("tag",i),await ag({fs:new eb(t),gitdir:r,tag:i})}catch(t){throw t.caller="git.writeTag",t}}async function ab({fs:t,dir:e,gitdir:r=f.join(e,".git"),tree:i}){try{return e$("fs",t),e$("gitdir",r),e$("tree",i),await eG({fs:new eb(t),gitdir:r,tree:i})}catch(t){throw t.caller="git.writeTree",t}}e.Errors=t7,e.STAGE=G,e.TREE=el,e.WORKDIR=ef,e.abortMerge=ev,e.add=eP,e.addNote=eq,e.addRemote=eV,e.annotatedTag=eZ,e.branch=eJ,e.checkout=e4,e.clone=rS,e.commit=rk,e.currentBranch=rR,e.default={Errors:t7,STAGE:G,TREE:el,WORKDIR:ef,add:eP,abortMerge:ev,addNote:eq,addRemote:eV,annotatedTag:eZ,branch:eJ,checkout:e4,clone:rS,commit:rk,getConfig:rQ,getConfigAll:r1,setConfig:iX,currentBranch:rR,deleteBranch:rP,deleteRef:rO,deleteRemote:rC,deleteTag:rD,expandOid:rT,expandRef:rH,fastForward:rK,fetch:rZ,findMergeBase:rY,findRoot:rX,getRemoteInfo:r2,getRemoteInfo2:r4,hashBlob:r6,indexPack:r5,init:r7,isDescendent:ie,isIgnored:ir,listBranches:ii,listFiles:io,listNotes:ic,listRefs:id,listRemotes:ih,listServerRefs:ip,listTags:ig,log:ix,merge:iv,packObjects:iS,pull:ik,push:iC,readBlob:iN,readCommit:iB,readNote:iT,readObject:iH,readTag:iz,readTree:iG,remove:iF,removeNote:iL,renameBranch:iK,resetIndex:iY,updateIndex:af,resolveRef:iJ,status:an,statusMatrix:al,tag:ac,version:ad,walk:au,writeBlob:ah,writeCommit:aw,writeObject:am,writeRef:ap,writeTag:ay,writeTree:ab,stash:aa},e.deleteBranch=rP,e.deleteRef=rO,e.deleteRemote=rC,e.deleteTag=rD,e.expandOid=rT,e.expandRef=rH,e.fastForward=rK,e.fetch=rZ,e.findMergeBase=rY,e.findRoot=rX,e.getConfig=rQ,e.getConfigAll=r1,e.getRemoteInfo=r2,e.getRemoteInfo2=r4,e.hashBlob=r6,e.indexPack=r5,e.init=r7,e.isDescendent=ie,e.isIgnored=ir,e.listBranches=ii,e.listFiles=io,e.listNotes=ic,e.listRefs=id,e.listRemotes=ih,e.listServerRefs=ip,e.listTags=ig,e.log=ix,e.merge=iv,e.packObjects=iS,e.pull=ik,e.push=iC,e.readBlob=iN,e.readCommit=iB,e.readNote=iT,e.readObject=iH,e.readTag=iz,e.readTree=iG,e.remove=iF,e.removeNote=iL,e.renameBranch=iK,e.resetIndex=iY,e.resolveRef=iJ,e.setConfig=iX,e.stash=aa,e.status=an,e.statusMatrix=al,e.tag=ac,e.updateIndex=af,e.version=ad,e.walk=au,e.writeBlob=ah,e.writeCommit=aw,e.writeObject=am,e.writeRef=ap,e.writeTag=ay,e.writeTree=ab}}]);